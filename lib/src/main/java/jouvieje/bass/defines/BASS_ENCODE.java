/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright @ 2007-2011 Jérôme Jouvie
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme Jouvie (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

package jouvieje.bass.defines;

/**
 * BASS_Encode_Start flags [NAME] BASS_ENCODE
 */
public interface BASS_ENCODE {
	/** don't send a WAV header to the encoder */
	public static final int BASS_ENCODE_NOHEAD = 1;
	/** convert floating-point sample data to 8-bit integer */
	public static final int BASS_ENCODE_FP_8BIT = 2;
	/** convert floating-point sample data to 16-bit integer */
	public static final int BASS_ENCODE_FP_16BIT = 4;
	/** convert floating-point sample data to 24-bit integer */
	public static final int BASS_ENCODE_FP_24BIT = 6;
	/** convert floating-point sample data to 32-bit integer */
	public static final int BASS_ENCODE_FP_32BIT = 8;
	/** big-endian sample data */
	public static final int BASS_ENCODE_BIGEND = 16;
	/** start encording paused */
	public static final int BASS_ENCODE_PAUSE = 32;
	/** write PCM sample data (no encoder) */
	public static final int BASS_ENCODE_PCM = 64;
	/** send an RF64 header */
	public static final int BASS_ENCODE_RF64 = 128;
	/** convert to mono (if not already) */
	public static final int BASS_ENCODE_MONO = 256;
	/** queue data to feed encoder asynchronously */
	public static final int BASS_ENCODE_QUEUE = 512;
	/** don't limit casting data rate */
	public static final int BASS_ENCODE_CAST_NOLIMIT = 0x1000;
	/** limit data rate to real-time */
	public static final int BASS_ENCODE_LIMIT = 0x2000;
	/** free the encoder when the channel is freed */
	public static final int BASS_ENCODE_AUTOFREE = 0x40000;
}