/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright @ 2007-2011 Jérôme Jouvie
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme Jouvie (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

package jouvieje.bass;

import jouvieje.bass.*;
import jouvieje.bass.exceptions.*;
import jouvieje.bass.callbacks.*;
import jouvieje.bass.*;
import jouvieje.bass.defines.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import java.nio.*;
import jouvieje.bass.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import jouvieje.bass.utils.*;

class BassJNI {
	static {
		if(!BassInit.isLibrariesLoaded()) {
			throw new RuntimeException("Libraries not loaded, use Init.loadLibraries().");
		}
	}

	protected final static native boolean Bass_BASS_SetConfig(int option, int value);
	protected final static native int Bass_BASS_GetConfig(int option);
	protected final static native boolean Bass_BASS_SetConfigPtr(int option, long value);
	protected final static native long Bass_BASS_GetConfigPtr(int option);
	protected final static native int Bass_BASS_GetVersion();
	protected final static native int Bass_BASS_ErrorGetCode();
	protected final static native boolean Bass_BASS_GetDeviceInfo(int device, long info);
	protected final static native boolean Bass_BASS_Init(int device, int freq, int flags, long win, long dsguid);
	protected final static native boolean Bass_BASS_SetDevice(int device);
	protected final static native int Bass_BASS_GetDevice();
	protected final static native boolean Bass_BASS_Free();
	protected final static native boolean Bass_BASS_GetInfo(long info);
	protected final static native boolean Bass_BASS_Update(int length);
	protected final static native float Bass_BASS_GetCPU();
	protected final static native boolean Bass_BASS_Start();
	protected final static native boolean Bass_BASS_Stop();
	protected final static native boolean Bass_BASS_Pause();
	protected final static native boolean Bass_BASS_SetVolume(float volume);
	protected final static native float Bass_BASS_GetVolume();
	protected final static native long Bass_BASS_PluginLoad(byte[] file, int flags);
	protected final static native boolean Bass_BASS_PluginFree(long handle);
	protected final static native long Bass_BASS_PluginGetInfo(long handle);
	protected final static native boolean Bass_BASS_Set3DFactors(float distf, float rollf, float doppf);
	protected final static native boolean Bass_BASS_Get3DFactors(FloatBuffer distf, long distf_, FloatBuffer rollf, long rollf_, FloatBuffer doppf, long doppf_);
	protected final static native boolean Bass_BASS_Set3DPosition(long pos, long vel, long front, long top);
	protected final static native boolean Bass_BASS_Get3DPosition(long pos, long vel, long front, long top);
	protected final static native void Bass_BASS_Apply3D();
	protected final static native long Bass_BASS_MusicLoad(boolean mem, long file, long offset, int length, int flags, int freq);
	protected final static native long Bass_BASS_MusicLoad(boolean mem, byte[] file, long offset, int length, int flags, int freq);
	protected final static native boolean Bass_BASS_MusicFree(long handle);
	protected final static native long Bass_BASS_SampleLoad(boolean mem, long file, long offset, int length, int max, int flags);
	protected final static native long Bass_BASS_SampleLoad(boolean mem, byte[] file, long offset, int length, int max, int flags);
	protected final static native long Bass_BASS_SampleCreate(int length, int freq, int chans, int max, int flags);
	protected final static native boolean Bass_BASS_SampleFree(long handle);
	protected final static native boolean Bass_BASS_SampleSetData(long handle, long buffer);
	protected final static native boolean Bass_BASS_SampleGetData(long handle, long buffer);
	protected final static native boolean Bass_BASS_SampleGetInfo(long handle, IntBuffer info, long info_);
	protected final static native boolean Bass_BASS_SampleSetInfo(long handle, IntBuffer info, long info_);
	protected final static native long Bass_BASS_SampleGetChannel(long handle, boolean onlynew);
	protected final static native int Bass_BASS_SampleGetChannels(long handle, long channels);
	protected final static native boolean Bass_BASS_SampleStop(long handle);
	protected final static native long Bass_BASS_StreamCreate(int freq, int chans, int flags, boolean proc, long user);
	protected final static native long Bass_BASS_StreamCreate(int freq, int chans, int flags, int proc, long user);
	protected final static native long Bass_BASS_StreamCreateFile(boolean mem, ByteBuffer file, long file_, long offset, long length, int flags);
	protected final static native long Bass_BASS_StreamCreateFile(boolean mem, byte[] file, long offset, long length, int flags);
	protected final static native long Bass_BASS_StreamCreateURL(byte[] url, int offset, int flags, boolean proc, long user);
	protected final static native long Bass_BASS_StreamCreateFileUser(int system, int flags, long proc, long user);
	protected final static native boolean Bass_BASS_StreamFree(long handle);
	protected final static native long Bass_BASS_StreamGetFilePosition(long handle, int mode);
	protected final static native int Bass_BASS_StreamPutData(long handle, ByteBuffer buffer, long buffer_, int length);
	protected final static native int Bass_BASS_StreamPutFileData(long handle, long buffer, int length);
	protected final static native boolean Bass_BASS_RecordGetDeviceInfo(int device, long info);
	protected final static native boolean Bass_BASS_RecordInit(int device);
	protected final static native boolean Bass_BASS_RecordSetDevice(int device);
	protected final static native int Bass_BASS_RecordGetDevice();
	protected final static native boolean Bass_BASS_RecordFree();
	protected final static native boolean Bass_BASS_RecordGetInfo(long info);
	protected final static native String Bass_BASS_RecordGetInputName(int input);
	protected final static native boolean Bass_BASS_RecordSetInput(int input, int flags, float volume);
	protected final static native int Bass_BASS_RecordGetInput(int input, FloatBuffer volume, long volume_);
	protected final static native long Bass_BASS_RecordStart(int freq, int chans, int flags, boolean proc, long user);
	protected final static native double Bass_BASS_ChannelBytes2Seconds(int handle, long pos);
	protected final static native long Bass_BASS_ChannelSeconds2Bytes(int handle, double pos);
	protected final static native int Bass_BASS_ChannelGetDevice(int handle);
	protected final static native boolean Bass_BASS_ChannelSetDevice(int handle, int device);
	protected final static native int Bass_BASS_ChannelIsActive(int handle);
	protected final static native boolean Bass_BASS_ChannelGetInfo(int handle, long info);
	protected final static native long Bass_BASS_ChannelGetTags(int handle, int tags);
	protected final static native int Bass_BASS_ChannelFlags(int handle, int flags, int mask);
	protected final static native boolean Bass_BASS_ChannelUpdate(int handle, int length);
	protected final static native boolean Bass_BASS_ChannelLock(int handle, boolean lock);
	protected final static native boolean Bass_BASS_ChannelPlay(int handle, boolean restart);
	protected final static native boolean Bass_BASS_ChannelStop(int handle);
	protected final static native boolean Bass_BASS_ChannelPause(int handle);
	protected final static native boolean Bass_BASS_ChannelSetAttribute(int handle, int attrib, float value);
	protected final static native boolean Bass_BASS_ChannelGetAttribute(int handle, int attrib, FloatBuffer value, long value_);
	protected final static native boolean Bass_BASS_ChannelSlideAttribute(int handle, int attrib, float value, int time);
	protected final static native boolean Bass_BASS_ChannelIsSliding(int handle, int attrib);
	protected final static native boolean Bass_BASS_ChannelSet3DAttributes(int handle, int mode, float min, float max, int iangle, int oangle, float outvol);
	protected final static native boolean Bass_BASS_ChannelGet3DAttributes(int handle, IntBuffer mode, long mode_, FloatBuffer min, long min_, FloatBuffer max, long max_, IntBuffer iangle, long iangle_, IntBuffer oangle, long oangle_, FloatBuffer outvol, long outvol_);
	protected final static native boolean Bass_BASS_ChannelSet3DPosition(int handle, long pos, long orient, long vel);
	protected final static native boolean Bass_BASS_ChannelGet3DPosition(int handle, long pos, long orient, long vel);
	protected final static native long Bass_BASS_ChannelGetLength(int handle, int mode);
	protected final static native boolean Bass_BASS_ChannelSetPosition(int handle, long pos, int mode);
	protected final static native long Bass_BASS_ChannelGetPosition(int handle, int mode);
	protected final static native int Bass_BASS_ChannelGetLevel(int handle);
	protected final static native int Bass_BASS_ChannelGetData(int handle, ByteBuffer buffer, long buffer_, int length);
	protected final static native long Bass_BASS_ChannelSetSync(int handle, int type, long param, boolean proc, long user);
	protected final static native boolean Bass_BASS_ChannelRemoveSync(int handle, long sync);
	protected final static native long Bass_BASS_ChannelSetDSP(int handle, boolean proc, long user, int priority);
	protected final static native boolean Bass_BASS_ChannelRemoveDSP(int handle, long dsp);
	protected final static native boolean Bass_BASS_ChannelSetLink(int handle, int chan);
	protected final static native boolean Bass_BASS_ChannelRemoveLink(int handle, int chan);
	protected final static native long Bass_BASS_ChannelSetFX(int handle, int type, int priority);
	protected final static native boolean Bass_BASS_ChannelRemoveFX(int handle, long fx);
	protected final static native boolean Bass_BASS_FXSetParameters(long handle, long params);
	protected final static native boolean Bass_BASS_FXGetParameters(long handle, long params);
	protected final static native boolean Bass_BASS_FXReset(long handle);
	protected final static native int Bass_BASS_Encode_GetVersion();
	protected final static native long Bass_BASS_Encode_Start(int handle, byte[] cmdline, int flags, boolean proc, long user);
	protected final static native long Bass_BASS_Encode_StartLimit(int handle, byte[] cmdline, int flags, boolean proc, long user, int limit);
	protected final static native boolean Bass_BASS_Encode_AddChunk(long handle, byte[] id, long buffer, int length);
	protected final static native int Bass_BASS_Encode_IsActive(int handle);
	protected final static native boolean Bass_BASS_Encode_Stop(int handle);
	protected final static native boolean Bass_BASS_Encode_StopEx(int handle, boolean queue);
	protected final static native boolean Bass_BASS_Encode_SetPaused(int handle, boolean paused);
	protected final static native boolean Bass_BASS_Encode_Write(int handle, long buffer, int length);
	protected final static native boolean Bass_BASS_Encode_SetNotify(int handle, boolean proc, long user);
	protected final static native long Bass_BASS_Encode_GetCount(int handle, int count);
	protected final static native boolean Bass_BASS_Encode_SetChannel(int handle, int channel);
	protected final static native int Bass_BASS_Encode_GetChannel(long handle);
	protected final static native boolean Bass_BASS_Encode_CastInit(long handle, byte[] server, byte[] pass, byte[] content, byte[] name, byte[] url, byte[] genre, byte[] desc, byte[] headers, int bitrate, boolean pub);
	protected final static native boolean Bass_BASS_Encode_CastSetTitle(long handle, byte[] title, byte[] url);
	protected final static native String Bass_BASS_Encode_CastGetStats(long handle, int type, byte[] pass);
	protected final static native int Bass_BASS_Encode_ServerInit(long handle, byte[] port, int buffer, int burst, int flags, boolean proc, long user);
	protected final static native boolean Bass_BASS_Encode_ServerKick(long handle, byte[] client);
	protected final static native long Bass_BASS_FLAC_StreamCreateFile(boolean mem, long file, long offset, long length, int flags);
	protected final static native long Bass_BASS_FLAC_StreamCreateURL(byte[] url, int offset, int flags, boolean proc, long user);
	protected final static native long Bass_BASS_FLAC_StreamCreateFileUser(int system, int flags, long procs, long user);
	protected final static native long Bass_BASS_MIDI_StreamCreate(int channels, int flags, int freq);
	protected final static native long Bass_BASS_MIDI_StreamCreateFile(boolean mem, long file, long offset, long length, int flags, int freq);
	protected final static native long Bass_BASS_MIDI_StreamCreateURL(byte[] url, int offset, int flags, boolean proc, long user, int freq);
	protected final static native long Bass_BASS_MIDI_StreamCreateFileUser(int system, int flags, long procs, long user, int freq);
	protected final static native boolean Bass_BASS_MIDI_StreamGetMark(long handle, int type, int index, IntBuffer mark, long mark_);
	protected final static native boolean Bass_BASS_MIDI_StreamSetFonts(long handle, long fonts, int count);
	protected final static native int Bass_BASS_MIDI_StreamGetFonts(long handle, long fonts, int count);
	protected final static native boolean Bass_BASS_MIDI_StreamLoadSamples(long handle);
	protected final static native boolean Bass_BASS_MIDI_StreamEvent(long handle, int chan, int event, int param);
	protected final static native int Bass_BASS_MIDI_StreamEvents(long handle, int mode, long events, int length);
	protected final static native int Bass_BASS_MIDI_StreamGetEvent(long handle, int chan, int event);
	protected final static native int Bass_BASS_MIDI_StreamGetEvents(long handle, int track, int filter, long events);
	protected final static native long Bass_BASS_MIDI_StreamGetChannel(long handle, int chan);
	protected final static native long Bass_BASS_MIDI_FontInit(long file, int flags);
	protected final static native boolean Bass_BASS_MIDI_FontFree(long handle);
	protected final static native boolean Bass_BASS_MIDI_FontGetInfo(long handle, long info);
	protected final static native String Bass_BASS_MIDI_FontGetPreset(long handle, int preset, int bank);
	protected final static native boolean Bass_BASS_MIDI_FontLoad(long handle, int preset, int bank);
	protected final static native boolean Bass_BASS_MIDI_FontCompact(long handle);
	protected final static native boolean Bass_BASS_MIDI_FontPack(long handle, long outfile, long encoder, int flags);
	protected final static native boolean Bass_BASS_MIDI_FontUnpack(long handle, long outfile, int flags);
	protected final static native boolean Bass_BASS_MIDI_FontSetVolume(long handle, float volume);
	protected final static native float Bass_BASS_MIDI_FontGetVolume(long handle);
	protected final static native boolean Bass_BASS_MIDI_InGetDeviceInfo(int device, long info);
	protected final static native boolean Bass_BASS_MIDI_InInit(int device, boolean proc, long user);
	protected final static native boolean Bass_BASS_MIDI_InFree(int device);
	protected final static native boolean Bass_BASS_MIDI_InStart(int device);
	protected final static native boolean Bass_BASS_MIDI_InStop(int device);
	protected final static native int Bass_BASS_Mixer_GetVersion();
	protected final static native long Bass_BASS_Mixer_StreamCreate(int freq, int chans, int flags);
	protected final static native boolean Bass_BASS_Mixer_StreamAddChannel(long handle, int channel, int flags);
	protected final static native boolean Bass_BASS_Mixer_StreamAddChannelEx(long handle, int channel, int flags, long start, long length);
	protected final static native long Bass_BASS_Mixer_ChannelGetMixer(int handle);
	protected final static native int Bass_BASS_Mixer_ChannelFlags(int handle, int flags, int mask);
	protected final static native boolean Bass_BASS_Mixer_ChannelRemove(int handle);
	protected final static native boolean Bass_BASS_Mixer_ChannelSetPosition(int handle, long pos, int mode);
	protected final static native long Bass_BASS_Mixer_ChannelGetPosition(int handle, int mode);
	protected final static native long Bass_BASS_Mixer_ChannelGetPositionEx(int channel, int mode, int delay);
	protected final static native int Bass_BASS_Mixer_ChannelGetLevel(int handle);
	protected final static native int Bass_BASS_Mixer_ChannelGetData(int handle, long buffer, int length);
	protected final static native long Bass_BASS_Mixer_ChannelSetSync(int handle, int type, long param, boolean proc, long user);
	protected final static native boolean Bass_BASS_Mixer_ChannelRemoveSync(int channel, long sync);
	protected final static native boolean Bass_BASS_Mixer_ChannelSetMatrix(int handle, FloatBuffer matrix, long matrix_);
	protected final static native boolean Bass_BASS_Mixer_ChannelGetMatrix(int handle, FloatBuffer matrix, long matrix_);
	protected final static native boolean Bass_BASS_Mixer_ChannelSetEnvelope(int handle, int type, long nodes, int count);
	protected final static native boolean Bass_BASS_Mixer_ChannelSetEnvelopePos(int handle, int type, long pos);
	protected final static native long Bass_BASS_Mixer_ChannelGetEnvelopePos(int handle, int type, FloatBuffer value, long value_);
	protected final static native long Bass_BASS_Split_StreamCreate(int channel, int flags, IntBuffer chanmap, long chanmap_);
	protected final static native int Bass_BASS_Split_StreamGetSource(long handle);
	protected final static native int Bass_BASS_Split_StreamGetSplits(int handle, long splits, int count);
	protected final static native boolean Bass_BASS_Split_StreamReset(int handle);
	protected final static native boolean Bass_BASS_Split_StreamResetEx(int handle, int offset);
	protected final static native int Bass_BASS_Split_StreamGetAvailable(int handle);
	protected final static native long Bass_BASS_WV_StreamCreateFile(boolean mem, long file, long offset, long length, int flags);
	protected final static native long Bass_BASS_WV_StreamCreateFileUser(int system, int flags, long procs, long user);
	protected final static native long Bass_BASS_AAC_StreamCreateFile(boolean mem, long file, long offset, long length, int flags);
	protected final static native long Bass_BASS_AAC_StreamCreateURL(byte[] url, int offset, int flags, boolean proc, long user);
	protected final static native long Bass_BASS_AAC_StreamCreateFileUser(int system, int flags, long procs, long user);
	protected final static native long Bass_BASS_MP4_StreamCreateFile(boolean mem, long file, long offset, long length, int flags);
	protected final static native long Bass_BASS_MP4_StreamCreateFileUser(int system, int flags, long procs, long user);
	protected final static native long Bass_BASS_AC3_StreamCreateFile(boolean mem, long file, long offset, long length, int flags);
	protected final static native long Bass_BASS_AC3_StreamCreateURL(byte[] url, int offset, int flags, boolean proc, long user);
	protected final static native long Bass_BASS_AC3_StreamCreateFileUser(int system, int flags, long procs, long user);
	protected final static native long Bass_BASS_ALAC_StreamCreateFile(boolean mem, long file, long offset, long length, int flags);
	protected final static native long Bass_BASS_ALAC_StreamCreateFileUser(int system, int flags, long procs, long user);
	protected final static native int Bass_BASS_FX_GetVersion();
	protected final static native long Bass_BASS_FX_TempoCreate(int chan, int flags);
	protected final static native int Bass_BASS_FX_TempoGetSource(long chan);
	protected final static native float Bass_BASS_FX_TempoGetRateRatio(long chan);
	protected final static native long Bass_BASS_FX_ReverseCreate(int chan, float dec_block, int flags);
	protected final static native int Bass_BASS_FX_ReverseGetSource(long chan);
	protected final static native float Bass_BASS_FX_BPM_DecodeGet(int chan, double startSec, double endSec, int minMaxBPM, int flags, boolean proc);
	protected final static native boolean Bass_BASS_FX_BPM_CallbackSet(int handle, boolean proc, double period, int minMaxBPM, int flags, long user);
	protected final static native boolean Bass_BASS_FX_BPM_CallbackReset(int handle);
	protected final static native float Bass_BASS_FX_BPM_Translate(int handle, float val2tran, int trans);
	protected final static native boolean Bass_BASS_FX_BPM_Free(int handle);
	protected final static native boolean Bass_BASS_FX_BPM_BeatCallbackSet(int handle, boolean proc, long user);
	protected final static native boolean Bass_BASS_FX_BPM_BeatCallbackReset(int handle);
	protected final static native boolean Bass_BASS_FX_BPM_BeatDecodeGet(int chan, double startSec, double endSec, int flags, boolean proc, long user);
	protected final static native boolean Bass_BASS_FX_BPM_BeatSetParameters(int handle, float bandwidth, float centerfreq, float beat_rtime);
	protected final static native boolean Bass_BASS_FX_BPM_BeatGetParameters(int handle, FloatBuffer bandwidth, long bandwidth_, FloatBuffer centerfreq, long centerfreq_, FloatBuffer beat_rtime, long beat_rtime_);
	protected final static native boolean Bass_BASS_FX_BPM_BeatFree(int handle);
	protected final static native long Bass_BASS_MPC_StreamCreateFile(boolean mem, long file, long offset, long length, int flags);
	protected final static native long Bass_BASS_MPC_StreamCreateURL(byte[] url, int offset, int flags, boolean proc, long user);
	protected final static native long Bass_BASS_MPC_StreamCreateFileUser(int system, int flags, long proc, long user);
	protected final static native long Bass_BASS_SPX_StreamCreateFile(boolean mem, long file, long offset, long length, int flags);
}