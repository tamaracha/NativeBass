/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright @ 2007-2011 Jérôme Jouvie
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme Jouvie (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

package jouvieje.bass.enumerations;

import jouvieje.bass.*;
import jouvieje.bass.exceptions.*;
import jouvieje.bass.callbacks.*;
import jouvieje.bass.*;
import jouvieje.bass.defines.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import java.nio.*;
import jouvieje.bass.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import jouvieje.bass.utils.*;
import java.util.HashMap;

/**
 * tempo attributes options [NAME] BASS_ATTRIB_TEMPO_OPTION
 */
public class BASS_ATTRIB_TEMPO_OPTION implements Enumeration, Comparable {
	/**  */
	public final static BASS_ATTRIB_TEMPO_OPTION BASS_ATTRIB_TEMPO_OPTION_USE_AA_FILTER = new BASS_ATTRIB_TEMPO_OPTION("BASS_ATTRIB_TEMPO_OPTION_USE_AA_FILTER", 0x10010);
	/**  */
	public final static BASS_ATTRIB_TEMPO_OPTION BASS_ATTRIB_TEMPO_OPTION_AA_FILTER_LENGTH = new BASS_ATTRIB_TEMPO_OPTION("BASS_ATTRIB_TEMPO_OPTION_AA_FILTER_LENGTH", EnumerationJNI.get_BASS_ATTRIB_TEMPO_OPTION_AA_FILTER_LENGTH());
	/**  */
	public final static BASS_ATTRIB_TEMPO_OPTION BASS_ATTRIB_TEMPO_OPTION_USE_QUICKALGO = new BASS_ATTRIB_TEMPO_OPTION("BASS_ATTRIB_TEMPO_OPTION_USE_QUICKALGO", EnumerationJNI.get_BASS_ATTRIB_TEMPO_OPTION_USE_QUICKALGO());
	/**  */
	public final static BASS_ATTRIB_TEMPO_OPTION BASS_ATTRIB_TEMPO_OPTION_SEQUENCE_MS = new BASS_ATTRIB_TEMPO_OPTION("BASS_ATTRIB_TEMPO_OPTION_SEQUENCE_MS", EnumerationJNI.get_BASS_ATTRIB_TEMPO_OPTION_SEQUENCE_MS());
	/**  */
	public final static BASS_ATTRIB_TEMPO_OPTION BASS_ATTRIB_TEMPO_OPTION_SEEKWINDOW_MS = new BASS_ATTRIB_TEMPO_OPTION("BASS_ATTRIB_TEMPO_OPTION_SEEKWINDOW_MS", EnumerationJNI.get_BASS_ATTRIB_TEMPO_OPTION_SEEKWINDOW_MS());
	/**  */
	public final static BASS_ATTRIB_TEMPO_OPTION BASS_ATTRIB_TEMPO_OPTION_OVERLAP_MS = new BASS_ATTRIB_TEMPO_OPTION("BASS_ATTRIB_TEMPO_OPTION_OVERLAP_MS", EnumerationJNI.get_BASS_ATTRIB_TEMPO_OPTION_OVERLAP_MS());
	/**  */
	public final static BASS_ATTRIB_TEMPO_OPTION BASS_ATTRIB_TEMPO_OPTION_PREVENT_CLICK = new BASS_ATTRIB_TEMPO_OPTION("BASS_ATTRIB_TEMPO_OPTION_PREVENT_CLICK", EnumerationJNI.get_BASS_ATTRIB_TEMPO_OPTION_PREVENT_CLICK());

	private final static HashMap VALUES = new HashMap(2*7);
	static {
		VALUES.put(new Integer(BASS_ATTRIB_TEMPO_OPTION_USE_AA_FILTER.asInt()), BASS_ATTRIB_TEMPO_OPTION_USE_AA_FILTER);
		VALUES.put(new Integer(BASS_ATTRIB_TEMPO_OPTION_AA_FILTER_LENGTH.asInt()), BASS_ATTRIB_TEMPO_OPTION_AA_FILTER_LENGTH);
		VALUES.put(new Integer(BASS_ATTRIB_TEMPO_OPTION_USE_QUICKALGO.asInt()), BASS_ATTRIB_TEMPO_OPTION_USE_QUICKALGO);
		VALUES.put(new Integer(BASS_ATTRIB_TEMPO_OPTION_SEQUENCE_MS.asInt()), BASS_ATTRIB_TEMPO_OPTION_SEQUENCE_MS);
		VALUES.put(new Integer(BASS_ATTRIB_TEMPO_OPTION_SEEKWINDOW_MS.asInt()), BASS_ATTRIB_TEMPO_OPTION_SEEKWINDOW_MS);
		VALUES.put(new Integer(BASS_ATTRIB_TEMPO_OPTION_OVERLAP_MS.asInt()), BASS_ATTRIB_TEMPO_OPTION_OVERLAP_MS);
		VALUES.put(new Integer(BASS_ATTRIB_TEMPO_OPTION_PREVENT_CLICK.asInt()), BASS_ATTRIB_TEMPO_OPTION_PREVENT_CLICK);
	}

	private final String name;
	private final int nativeValue;
	private BASS_ATTRIB_TEMPO_OPTION(String name, int nativeValue) {
		this.name = name;
		this.nativeValue = nativeValue;
	}

	public int asInt() {
		return nativeValue;
	}
	public String toString() {
		return name;
	}
	public boolean equals(Object object) {
		if(object instanceof BASS_ATTRIB_TEMPO_OPTION) {
			return asInt() == ((BASS_ATTRIB_TEMPO_OPTION)object).asInt();
		}
		return false;
	}
	public int compareTo(Object object) {
		return asInt() - ((BASS_ATTRIB_TEMPO_OPTION)object).asInt();
	}

	/**
	 * Creates a "custom" enum field that contains the value (bitwise OR operator) :<BR>
	 * <pre><code>	this.asInt() | object.asInt()</code></pre><BR>
	 * The name (return by <code>toString()</code>) of the enum field created is :<BR>
	 * <pre><code>	BASS_ATTRIB_TEMPO_OPTION_CUSTOM</code></pre>
	 * @param object a BASS_ATTRIB_TEMPO_OPTION enum field
	 * @return a custom BASS_ATTRIB_TEMPO_OPTION enum field
	 */
	public BASS_ATTRIB_TEMPO_OPTION OR(BASS_ATTRIB_TEMPO_OPTION object) {
		return new BASS_ATTRIB_TEMPO_OPTION("BASS_ATTRIB_TEMPO_OPTION_CUSTOM", asInt() | object.asInt());
	}
	/**
	 * @return true if the enum field is a custom field
	 */
	public boolean isCustom() {
		return name.equals("BASS_ATTRIB_TEMPO_OPTION_CUSTOM");
	}

	/**
	 * Retrieve a BASS_ATTRIB_TEMPO_OPTION enum field with his integer value
	 * @param nativeValue the integer value of the field to retrieve
	 * @return the BASS_ATTRIB_TEMPO_OPTION enum field that correspond to the integer value
	 */
	public static BASS_ATTRIB_TEMPO_OPTION get(int nativeValue) {
		BASS_ATTRIB_TEMPO_OPTION javaResult = (BASS_ATTRIB_TEMPO_OPTION)VALUES.get(new Integer(nativeValue));
		if(javaResult == null) {
			return new BASS_ATTRIB_TEMPO_OPTION("BASS_ATTRIB_TEMPO_OPTION_CUSTOM", nativeValue);
		}
		return javaResult;
	}

	/**
	 * Retrieve a BASS_ATTRIB_TEMPO_OPTION enum field from a Pointer
	 * @param pointer a pointer holding an BASS_ATTRIB_TEMPO_OPTION enum field
	 * @return the BASS_ATTRIB_TEMPO_OPTION enum field that correspond to the enum field in the pointer
	 */
	public static BASS_ATTRIB_TEMPO_OPTION get(Pointer pointer) {
		return get(pointer.asInt());
	}

	/**
	 * @return an <code>Iterator</code> over the elements in this enumeration.<BR>
	 * Can be cast to <code>Iterator<BASS_ATTRIB_TEMPO_OPTION></code> in Java 1.5.
	 */
	public static java.util.Iterator iterator() {
		return new java.util.Iterator(){
			private java.util.Iterator i = VALUES.values().iterator();	//Wrapper of the HashMap iterator
			public boolean hasNext() { return i.hasNext(); }
			public Object next() { return i.next(); }
			public void remove() { throw new UnsupportedOperationException(); }
		};
	}
}