/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright @ 2007-2011 Jérôme Jouvie
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme Jouvie (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

package jouvieje.bass.structures;

import jouvieje.bass.*;
import jouvieje.bass.exceptions.*;
import jouvieje.bass.callbacks.*;
import jouvieje.bass.*;
import jouvieje.bass.defines.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import java.nio.*;
import jouvieje.bass.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import jouvieje.bass.utils.*;

class StructureJNI {
	static {
		if(!BassInit.isLibrariesLoaded()) {
			throw new RuntimeException("Libraries not loaded, use Init.loadLibraries().");
		}
	}

						/* BASS_3DVECTOR */

	protected final static native long BASS_3DVECTOR_new();
	protected final static native void BASS_3DVECTOR_delete(long pointer);
	protected final static native float BASS_3DVECTOR_get_x(long pointer);
	protected final static native void BASS_3DVECTOR_set_x(long pointer, float x);
	protected final static native float BASS_3DVECTOR_get_y(long pointer);
	protected final static native void BASS_3DVECTOR_set_y(long pointer, float y);
	protected final static native float BASS_3DVECTOR_get_z(long pointer);
	protected final static native void BASS_3DVECTOR_set_z(long pointer, float z);

	protected final static native long BASS_3DVECTOR_create(float x, float y, float z);
	protected final static native void BASS_3DVECTOR_set_xyz(long pointer, long vector);
	protected final static native void BASS_3DVECTOR_set_xyz(long pointer, float x, float y, float z);

						/* BASS_BFX_APF */

	protected final static native long BASS_BFX_APF_new();
	protected final static native void BASS_BFX_APF_delete(long pointer);
	protected final static native float BASS_BFX_APF_get_fGain(long pointer);
	protected final static native void BASS_BFX_APF_set_fGain(long pointer, float fGain);
	protected final static native float BASS_BFX_APF_get_fDelay(long pointer);
	protected final static native void BASS_BFX_APF_set_fDelay(long pointer, float fDelay);
	protected final static native int BASS_BFX_APF_get_lChannel(long pointer);
	protected final static native void BASS_BFX_APF_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_AUTOWAH */

	protected final static native long BASS_BFX_AUTOWAH_new();
	protected final static native void BASS_BFX_AUTOWAH_delete(long pointer);
	protected final static native float BASS_BFX_AUTOWAH_get_fDryMix(long pointer);
	protected final static native void BASS_BFX_AUTOWAH_set_fDryMix(long pointer, float fDryMix);
	protected final static native float BASS_BFX_AUTOWAH_get_fWetMix(long pointer);
	protected final static native void BASS_BFX_AUTOWAH_set_fWetMix(long pointer, float fWetMix);
	protected final static native float BASS_BFX_AUTOWAH_get_fFeedback(long pointer);
	protected final static native void BASS_BFX_AUTOWAH_set_fFeedback(long pointer, float fFeedback);
	protected final static native float BASS_BFX_AUTOWAH_get_fRate(long pointer);
	protected final static native void BASS_BFX_AUTOWAH_set_fRate(long pointer, float fRate);
	protected final static native float BASS_BFX_AUTOWAH_get_fRange(long pointer);
	protected final static native void BASS_BFX_AUTOWAH_set_fRange(long pointer, float fRange);
	protected final static native float BASS_BFX_AUTOWAH_get_fFreq(long pointer);
	protected final static native void BASS_BFX_AUTOWAH_set_fFreq(long pointer, float fFreq);
	protected final static native int BASS_BFX_AUTOWAH_get_lChannel(long pointer);
	protected final static native void BASS_BFX_AUTOWAH_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_BQF */

	protected final static native long BASS_BFX_BQF_new();
	protected final static native void BASS_BFX_BQF_delete(long pointer);
	protected final static native int BASS_BFX_BQF_get_lFilter(long pointer);
	protected final static native void BASS_BFX_BQF_set_lFilter(long pointer, int lFilter);
	protected final static native float BASS_BFX_BQF_get_fCenter(long pointer);
	protected final static native void BASS_BFX_BQF_set_fCenter(long pointer, float fCenter);
	protected final static native float BASS_BFX_BQF_get_fGain(long pointer);
	protected final static native void BASS_BFX_BQF_set_fGain(long pointer, float fGain);
	protected final static native float BASS_BFX_BQF_get_fBandwidth(long pointer);
	protected final static native void BASS_BFX_BQF_set_fBandwidth(long pointer, float fBandwidth);
	protected final static native float BASS_BFX_BQF_get_fQ(long pointer);
	protected final static native void BASS_BFX_BQF_set_fQ(long pointer, float fQ);
	protected final static native float BASS_BFX_BQF_get_fS(long pointer);
	protected final static native void BASS_BFX_BQF_set_fS(long pointer, float fS);
	protected final static native int BASS_BFX_BQF_get_lChannel(long pointer);
	protected final static native void BASS_BFX_BQF_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_CHORUS */

	protected final static native long BASS_BFX_CHORUS_new();
	protected final static native void BASS_BFX_CHORUS_delete(long pointer);
	protected final static native float BASS_BFX_CHORUS_get_fDryMix(long pointer);
	protected final static native void BASS_BFX_CHORUS_set_fDryMix(long pointer, float fDryMix);
	protected final static native float BASS_BFX_CHORUS_get_fWetMix(long pointer);
	protected final static native void BASS_BFX_CHORUS_set_fWetMix(long pointer, float fWetMix);
	protected final static native float BASS_BFX_CHORUS_get_fFeedback(long pointer);
	protected final static native void BASS_BFX_CHORUS_set_fFeedback(long pointer, float fFeedback);
	protected final static native float BASS_BFX_CHORUS_get_fMinSweep(long pointer);
	protected final static native void BASS_BFX_CHORUS_set_fMinSweep(long pointer, float fMinSweep);
	protected final static native float BASS_BFX_CHORUS_get_fMaxSweep(long pointer);
	protected final static native void BASS_BFX_CHORUS_set_fMaxSweep(long pointer, float fMaxSweep);
	protected final static native float BASS_BFX_CHORUS_get_fRate(long pointer);
	protected final static native void BASS_BFX_CHORUS_set_fRate(long pointer, float fRate);
	protected final static native int BASS_BFX_CHORUS_get_lChannel(long pointer);
	protected final static native void BASS_BFX_CHORUS_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_COMPRESSOR */

	protected final static native long BASS_BFX_COMPRESSOR_new();
	protected final static native void BASS_BFX_COMPRESSOR_delete(long pointer);
	protected final static native float BASS_BFX_COMPRESSOR_get_fThreshold(long pointer);
	protected final static native void BASS_BFX_COMPRESSOR_set_fThreshold(long pointer, float fThreshold);
	protected final static native float BASS_BFX_COMPRESSOR_get_fAttacktime(long pointer);
	protected final static native void BASS_BFX_COMPRESSOR_set_fAttacktime(long pointer, float fAttacktime);
	protected final static native float BASS_BFX_COMPRESSOR_get_fReleasetime(long pointer);
	protected final static native void BASS_BFX_COMPRESSOR_set_fReleasetime(long pointer, float fReleasetime);
	protected final static native int BASS_BFX_COMPRESSOR_get_lChannel(long pointer);
	protected final static native void BASS_BFX_COMPRESSOR_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_COMPRESSOR2 */

	protected final static native long BASS_BFX_COMPRESSOR2_new();
	protected final static native void BASS_BFX_COMPRESSOR2_delete(long pointer);
	protected final static native float BASS_BFX_COMPRESSOR2_get_fGain(long pointer);
	protected final static native void BASS_BFX_COMPRESSOR2_set_fGain(long pointer, float fGain);
	protected final static native float BASS_BFX_COMPRESSOR2_get_fThreshold(long pointer);
	protected final static native void BASS_BFX_COMPRESSOR2_set_fThreshold(long pointer, float fThreshold);
	protected final static native float BASS_BFX_COMPRESSOR2_get_fRatio(long pointer);
	protected final static native void BASS_BFX_COMPRESSOR2_set_fRatio(long pointer, float fRatio);
	protected final static native float BASS_BFX_COMPRESSOR2_get_fAttack(long pointer);
	protected final static native void BASS_BFX_COMPRESSOR2_set_fAttack(long pointer, float fAttack);
	protected final static native float BASS_BFX_COMPRESSOR2_get_fRelease(long pointer);
	protected final static native void BASS_BFX_COMPRESSOR2_set_fRelease(long pointer, float fRelease);
	protected final static native int BASS_BFX_COMPRESSOR2_get_lChannel(long pointer);
	protected final static native void BASS_BFX_COMPRESSOR2_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_DAMP */

	protected final static native long BASS_BFX_DAMP_new();
	protected final static native void BASS_BFX_DAMP_delete(long pointer);
	protected final static native float BASS_BFX_DAMP_get_fTarget(long pointer);
	protected final static native void BASS_BFX_DAMP_set_fTarget(long pointer, float fTarget);
	protected final static native float BASS_BFX_DAMP_get_fQuiet(long pointer);
	protected final static native void BASS_BFX_DAMP_set_fQuiet(long pointer, float fQuiet);
	protected final static native float BASS_BFX_DAMP_get_fRate(long pointer);
	protected final static native void BASS_BFX_DAMP_set_fRate(long pointer, float fRate);
	protected final static native float BASS_BFX_DAMP_get_fGain(long pointer);
	protected final static native void BASS_BFX_DAMP_set_fGain(long pointer, float fGain);
	protected final static native float BASS_BFX_DAMP_get_fDelay(long pointer);
	protected final static native void BASS_BFX_DAMP_set_fDelay(long pointer, float fDelay);
	protected final static native int BASS_BFX_DAMP_get_lChannel(long pointer);
	protected final static native void BASS_BFX_DAMP_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_DISTORTION */

	protected final static native long BASS_BFX_DISTORTION_new();
	protected final static native void BASS_BFX_DISTORTION_delete(long pointer);
	protected final static native float BASS_BFX_DISTORTION_get_fDrive(long pointer);
	protected final static native void BASS_BFX_DISTORTION_set_fDrive(long pointer, float fDrive);
	protected final static native float BASS_BFX_DISTORTION_get_fDryMix(long pointer);
	protected final static native void BASS_BFX_DISTORTION_set_fDryMix(long pointer, float fDryMix);
	protected final static native float BASS_BFX_DISTORTION_get_fWetMix(long pointer);
	protected final static native void BASS_BFX_DISTORTION_set_fWetMix(long pointer, float fWetMix);
	protected final static native float BASS_BFX_DISTORTION_get_fFeedback(long pointer);
	protected final static native void BASS_BFX_DISTORTION_set_fFeedback(long pointer, float fFeedback);
	protected final static native float BASS_BFX_DISTORTION_get_fVolume(long pointer);
	protected final static native void BASS_BFX_DISTORTION_set_fVolume(long pointer, float fVolume);
	protected final static native int BASS_BFX_DISTORTION_get_lChannel(long pointer);
	protected final static native void BASS_BFX_DISTORTION_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_ECHO */

	protected final static native long BASS_BFX_ECHO_new();
	protected final static native void BASS_BFX_ECHO_delete(long pointer);
	protected final static native float BASS_BFX_ECHO_get_fLevel(long pointer);
	protected final static native void BASS_BFX_ECHO_set_fLevel(long pointer, float fLevel);
	protected final static native int BASS_BFX_ECHO_get_lDelay(long pointer);
	protected final static native void BASS_BFX_ECHO_set_lDelay(long pointer, int lDelay);

						/* BASS_BFX_ECHO2 */

	protected final static native long BASS_BFX_ECHO2_new();
	protected final static native void BASS_BFX_ECHO2_delete(long pointer);
	protected final static native float BASS_BFX_ECHO2_get_fDryMix(long pointer);
	protected final static native void BASS_BFX_ECHO2_set_fDryMix(long pointer, float fDryMix);
	protected final static native float BASS_BFX_ECHO2_get_fWetMix(long pointer);
	protected final static native void BASS_BFX_ECHO2_set_fWetMix(long pointer, float fWetMix);
	protected final static native float BASS_BFX_ECHO2_get_fFeedback(long pointer);
	protected final static native void BASS_BFX_ECHO2_set_fFeedback(long pointer, float fFeedback);
	protected final static native float BASS_BFX_ECHO2_get_fDelay(long pointer);
	protected final static native void BASS_BFX_ECHO2_set_fDelay(long pointer, float fDelay);
	protected final static native int BASS_BFX_ECHO2_get_lChannel(long pointer);
	protected final static native void BASS_BFX_ECHO2_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_ECHO3 */

	protected final static native long BASS_BFX_ECHO3_new();
	protected final static native void BASS_BFX_ECHO3_delete(long pointer);
	protected final static native float BASS_BFX_ECHO3_get_fDryMix(long pointer);
	protected final static native void BASS_BFX_ECHO3_set_fDryMix(long pointer, float fDryMix);
	protected final static native float BASS_BFX_ECHO3_get_fWetMix(long pointer);
	protected final static native void BASS_BFX_ECHO3_set_fWetMix(long pointer, float fWetMix);
	protected final static native float BASS_BFX_ECHO3_get_fDelay(long pointer);
	protected final static native void BASS_BFX_ECHO3_set_fDelay(long pointer, float fDelay);
	protected final static native int BASS_BFX_ECHO3_get_lChannel(long pointer);
	protected final static native void BASS_BFX_ECHO3_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_ENV_NODE */

	protected final static native long BASS_BFX_ENV_NODE_new();
	protected final static native void BASS_BFX_ENV_NODE_delete(long pointer);
	protected final static native double BASS_BFX_ENV_NODE_get_pos(long pointer);
	protected final static native void BASS_BFX_ENV_NODE_set_pos(long pointer, double pos);
	protected final static native float BASS_BFX_ENV_NODE_get_val(long pointer);
	protected final static native void BASS_BFX_ENV_NODE_set_val(long pointer, float val);

						/* BASS_BFX_FLANGER */

	protected final static native long BASS_BFX_FLANGER_new();
	protected final static native void BASS_BFX_FLANGER_delete(long pointer);
	protected final static native float BASS_BFX_FLANGER_get_fWetDry(long pointer);
	protected final static native void BASS_BFX_FLANGER_set_fWetDry(long pointer, float fWetDry);
	protected final static native float BASS_BFX_FLANGER_get_fSpeed(long pointer);
	protected final static native void BASS_BFX_FLANGER_set_fSpeed(long pointer, float fSpeed);
	protected final static native int BASS_BFX_FLANGER_get_lChannel(long pointer);
	protected final static native void BASS_BFX_FLANGER_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_LPF */

	protected final static native long BASS_BFX_LPF_new();
	protected final static native void BASS_BFX_LPF_delete(long pointer);
	protected final static native float BASS_BFX_LPF_get_fResonance(long pointer);
	protected final static native void BASS_BFX_LPF_set_fResonance(long pointer, float fResonance);
	protected final static native float BASS_BFX_LPF_get_fCutOffFreq(long pointer);
	protected final static native void BASS_BFX_LPF_set_fCutOffFreq(long pointer, float fCutOffFreq);
	protected final static native int BASS_BFX_LPF_get_lChannel(long pointer);
	protected final static native void BASS_BFX_LPF_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_MIX */

	protected final static native long BASS_BFX_MIX_new();
	protected final static native void BASS_BFX_MIX_delete(long pointer);
	protected final static native void BASS_BFX_MIX_set_lChannel(long pointer, IntBuffer lChannel, long lChannel_);

						/* BASS_BFX_PEAKEQ */

	protected final static native long BASS_BFX_PEAKEQ_new();
	protected final static native void BASS_BFX_PEAKEQ_delete(long pointer);
	protected final static native int BASS_BFX_PEAKEQ_get_lBand(long pointer);
	protected final static native void BASS_BFX_PEAKEQ_set_lBand(long pointer, int lBand);
	protected final static native float BASS_BFX_PEAKEQ_get_fBandwidth(long pointer);
	protected final static native void BASS_BFX_PEAKEQ_set_fBandwidth(long pointer, float fBandwidth);
	protected final static native float BASS_BFX_PEAKEQ_get_fQ(long pointer);
	protected final static native void BASS_BFX_PEAKEQ_set_fQ(long pointer, float fQ);
	protected final static native float BASS_BFX_PEAKEQ_get_fCenter(long pointer);
	protected final static native void BASS_BFX_PEAKEQ_set_fCenter(long pointer, float fCenter);
	protected final static native float BASS_BFX_PEAKEQ_get_fGain(long pointer);
	protected final static native void BASS_BFX_PEAKEQ_set_fGain(long pointer, float fGain);
	protected final static native int BASS_BFX_PEAKEQ_get_lChannel(long pointer);
	protected final static native void BASS_BFX_PEAKEQ_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_PHASER */

	protected final static native long BASS_BFX_PHASER_new();
	protected final static native void BASS_BFX_PHASER_delete(long pointer);
	protected final static native float BASS_BFX_PHASER_get_fDryMix(long pointer);
	protected final static native void BASS_BFX_PHASER_set_fDryMix(long pointer, float fDryMix);
	protected final static native float BASS_BFX_PHASER_get_fWetMix(long pointer);
	protected final static native void BASS_BFX_PHASER_set_fWetMix(long pointer, float fWetMix);
	protected final static native float BASS_BFX_PHASER_get_fFeedback(long pointer);
	protected final static native void BASS_BFX_PHASER_set_fFeedback(long pointer, float fFeedback);
	protected final static native float BASS_BFX_PHASER_get_fRate(long pointer);
	protected final static native void BASS_BFX_PHASER_set_fRate(long pointer, float fRate);
	protected final static native float BASS_BFX_PHASER_get_fRange(long pointer);
	protected final static native void BASS_BFX_PHASER_set_fRange(long pointer, float fRange);
	protected final static native float BASS_BFX_PHASER_get_fFreq(long pointer);
	protected final static native void BASS_BFX_PHASER_set_fFreq(long pointer, float fFreq);
	protected final static native int BASS_BFX_PHASER_get_lChannel(long pointer);
	protected final static native void BASS_BFX_PHASER_set_lChannel(long pointer, int lChannel);

						/* BASS_BFX_REVERB */

	protected final static native long BASS_BFX_REVERB_new();
	protected final static native void BASS_BFX_REVERB_delete(long pointer);
	protected final static native float BASS_BFX_REVERB_get_fLevel(long pointer);
	protected final static native void BASS_BFX_REVERB_set_fLevel(long pointer, float fLevel);
	protected final static native int BASS_BFX_REVERB_get_lDelay(long pointer);
	protected final static native void BASS_BFX_REVERB_set_lDelay(long pointer, int lDelay);

						/* BASS_BFX_VOLUME */

	protected final static native long BASS_BFX_VOLUME_new();
	protected final static native void BASS_BFX_VOLUME_delete(long pointer);
	protected final static native int BASS_BFX_VOLUME_get_lChannel(long pointer);
	protected final static native void BASS_BFX_VOLUME_set_lChannel(long pointer, int lChannel);
	protected final static native float BASS_BFX_VOLUME_get_fVolume(long pointer);
	protected final static native void BASS_BFX_VOLUME_set_fVolume(long pointer, float fVolume);

						/* BASS_BFX_VOLUME_ENV */

	protected final static native long BASS_BFX_VOLUME_ENV_new();
	protected final static native void BASS_BFX_VOLUME_ENV_delete(long pointer);
	protected final static native int BASS_BFX_VOLUME_ENV_get_lChannel(long pointer);
	protected final static native void BASS_BFX_VOLUME_ENV_set_lChannel(long pointer, int lChannel);
	protected final static native int BASS_BFX_VOLUME_ENV_get_lNodeCount(long pointer);
	protected final static native void BASS_BFX_VOLUME_ENV_set_lNodeCount(long pointer, int lNodeCount);
	protected final static native long BASS_BFX_VOLUME_ENV_get_pNodes(long pointer);
	protected final static native void BASS_BFX_VOLUME_ENV_set_pNodes(long pointer, long pNodes);
	protected final static native boolean BASS_BFX_VOLUME_ENV_get_bFollow(long pointer);
	protected final static native void BASS_BFX_VOLUME_ENV_set_bFollow(long pointer, boolean bFollow);

						/* BASS_CHANNELINFO */

	protected final static native long BASS_CHANNELINFO_new();
	protected final static native void BASS_CHANNELINFO_delete(long pointer);
	protected final static native int BASS_CHANNELINFO_get_freq(long pointer);
	protected final static native void BASS_CHANNELINFO_set_freq(long pointer, int freq);
	protected final static native int BASS_CHANNELINFO_get_chans(long pointer);
	protected final static native void BASS_CHANNELINFO_set_chans(long pointer, int chans);
	protected final static native int BASS_CHANNELINFO_get_flags(long pointer);
	protected final static native void BASS_CHANNELINFO_set_flags(long pointer, int flags);
	protected final static native int BASS_CHANNELINFO_get_ctype(long pointer);
	protected final static native void BASS_CHANNELINFO_set_ctype(long pointer, int ctype);
	protected final static native int BASS_CHANNELINFO_get_origres(long pointer);
	protected final static native void BASS_CHANNELINFO_set_origres(long pointer, int origres);
	protected final static native long BASS_CHANNELINFO_get_plugin(long pointer);
	protected final static native void BASS_CHANNELINFO_set_plugin(long pointer, long plugin);
	protected final static native long BASS_CHANNELINFO_get_sample(long pointer);
	protected final static native void BASS_CHANNELINFO_set_sample(long pointer, long sample);
	protected final static native String BASS_CHANNELINFO_get_filename(long pointer);
	protected final static native void BASS_CHANNELINFO_set_filename(long pointer, byte[] filename);

						/* BASS_DEVICEINFO */

	protected final static native long BASS_DEVICEINFO_new();
	protected final static native void BASS_DEVICEINFO_delete(long pointer);
	protected final static native String BASS_DEVICEINFO_get_name(long pointer);
	protected final static native void BASS_DEVICEINFO_set_name(long pointer, byte[] name);
	protected final static native String BASS_DEVICEINFO_get_driver(long pointer);
	protected final static native void BASS_DEVICEINFO_set_driver(long pointer, byte[] driver);
	protected final static native int BASS_DEVICEINFO_get_flags(long pointer);
	protected final static native void BASS_DEVICEINFO_set_flags(long pointer, int flags);

						/* BASS_FILEPROCS */

	protected final static native long BASS_FILEPROCS_new();
	protected final static native void BASS_FILEPROCS_delete(long pointer);
	protected final static native void BASS_FILEPROCS_set_close(long pointer, boolean close);
	protected final static native void BASS_FILEPROCS_set_length(long pointer, boolean length);
	protected final static native void BASS_FILEPROCS_set_read(long pointer, boolean read);
	protected final static native void BASS_FILEPROCS_set_seek(long pointer, boolean seek);

						/* BASS_INFO */

	protected final static native long BASS_INFO_new();
	protected final static native void BASS_INFO_delete(long pointer);
	protected final static native int BASS_INFO_get_flags(long pointer);
	protected final static native void BASS_INFO_set_flags(long pointer, int flags);
	protected final static native int BASS_INFO_get_hwsize(long pointer);
	protected final static native void BASS_INFO_set_hwsize(long pointer, int hwsize);
	protected final static native int BASS_INFO_get_hwfree(long pointer);
	protected final static native void BASS_INFO_set_hwfree(long pointer, int hwfree);
	protected final static native int BASS_INFO_get_freesam(long pointer);
	protected final static native void BASS_INFO_set_freesam(long pointer, int freesam);
	protected final static native int BASS_INFO_get_free3d(long pointer);
	protected final static native void BASS_INFO_set_free3d(long pointer, int free3d);
	protected final static native int BASS_INFO_get_minrate(long pointer);
	protected final static native void BASS_INFO_set_minrate(long pointer, int minrate);
	protected final static native int BASS_INFO_get_maxrate(long pointer);
	protected final static native void BASS_INFO_set_maxrate(long pointer, int maxrate);
	protected final static native boolean BASS_INFO_get_eax(long pointer);
	protected final static native void BASS_INFO_set_eax(long pointer, boolean eax);
	protected final static native int BASS_INFO_get_minbuf(long pointer);
	protected final static native void BASS_INFO_set_minbuf(long pointer, int minbuf);
	protected final static native int BASS_INFO_get_dsver(long pointer);
	protected final static native void BASS_INFO_set_dsver(long pointer, int dsver);
	protected final static native int BASS_INFO_get_latency(long pointer);
	protected final static native void BASS_INFO_set_latency(long pointer, int latency);
	protected final static native int BASS_INFO_get_initflags(long pointer);
	protected final static native void BASS_INFO_set_initflags(long pointer, int initflags);
	protected final static native int BASS_INFO_get_speakers(long pointer);
	protected final static native void BASS_INFO_set_speakers(long pointer, int speakers);
	protected final static native int BASS_INFO_get_freq(long pointer);
	protected final static native void BASS_INFO_set_freq(long pointer, int freq);

						/* BASS_MIDI_DEVICEINFO */

	protected final static native long BASS_MIDI_DEVICEINFO_new();
	protected final static native void BASS_MIDI_DEVICEINFO_delete(long pointer);
	protected final static native String BASS_MIDI_DEVICEINFO_get_name(long pointer);
	protected final static native void BASS_MIDI_DEVICEINFO_set_name(long pointer, byte[] name);
	protected final static native int BASS_MIDI_DEVICEINFO_get_id(long pointer);
	protected final static native void BASS_MIDI_DEVICEINFO_set_id(long pointer, int id);
	protected final static native int BASS_MIDI_DEVICEINFO_get_flags(long pointer);
	protected final static native void BASS_MIDI_DEVICEINFO_set_flags(long pointer, int flags);

						/* BASS_MIDI_EVENT */

	protected final static native long BASS_MIDI_EVENT_new();
	protected final static native void BASS_MIDI_EVENT_delete(long pointer);
	protected final static native int BASS_MIDI_EVENT_get_event(long pointer);
	protected final static native void BASS_MIDI_EVENT_set_event(long pointer, int event);
	protected final static native int BASS_MIDI_EVENT_get_param(long pointer);
	protected final static native void BASS_MIDI_EVENT_set_param(long pointer, int param);
	protected final static native int BASS_MIDI_EVENT_get_chan(long pointer);
	protected final static native void BASS_MIDI_EVENT_set_chan(long pointer, int chan);
	protected final static native int BASS_MIDI_EVENT_get_tick(long pointer);
	protected final static native void BASS_MIDI_EVENT_set_tick(long pointer, int tick);
	protected final static native int BASS_MIDI_EVENT_get_pos(long pointer);
	protected final static native void BASS_MIDI_EVENT_set_pos(long pointer, int pos);

						/* BASS_MIDI_FONT */

	protected final static native long BASS_MIDI_FONT_new();
	protected final static native void BASS_MIDI_FONT_delete(long pointer);
	protected final static native long BASS_MIDI_FONT_get_font(long pointer);
	protected final static native void BASS_MIDI_FONT_set_font(long pointer, long font);
	protected final static native int BASS_MIDI_FONT_get_preset(long pointer);
	protected final static native void BASS_MIDI_FONT_set_preset(long pointer, int preset);
	protected final static native int BASS_MIDI_FONT_get_bank(long pointer);
	protected final static native void BASS_MIDI_FONT_set_bank(long pointer, int bank);

						/* BASS_MIDI_FONTINFO */

	protected final static native long BASS_MIDI_FONTINFO_new();
	protected final static native void BASS_MIDI_FONTINFO_delete(long pointer);
	protected final static native String BASS_MIDI_FONTINFO_get_name(long pointer);
	protected final static native void BASS_MIDI_FONTINFO_set_name(long pointer, byte[] name);
	protected final static native String BASS_MIDI_FONTINFO_get_copyright(long pointer);
	protected final static native void BASS_MIDI_FONTINFO_set_copyright(long pointer, byte[] copyright);
	protected final static native String BASS_MIDI_FONTINFO_get_comment(long pointer);
	protected final static native void BASS_MIDI_FONTINFO_set_comment(long pointer, byte[] comment);
	protected final static native int BASS_MIDI_FONTINFO_get_presets(long pointer);
	protected final static native void BASS_MIDI_FONTINFO_set_presets(long pointer, int presets);
	protected final static native int BASS_MIDI_FONTINFO_get_samsize(long pointer);
	protected final static native void BASS_MIDI_FONTINFO_set_samsize(long pointer, int samsize);
	protected final static native int BASS_MIDI_FONTINFO_get_samload(long pointer);
	protected final static native void BASS_MIDI_FONTINFO_set_samload(long pointer, int samload);
	protected final static native int BASS_MIDI_FONTINFO_get_samtype(long pointer);
	protected final static native void BASS_MIDI_FONTINFO_set_samtype(long pointer, int samtype);

						/* BASS_MIDI_MARK */

	protected final static native long BASS_MIDI_MARK_new();
	protected final static native void BASS_MIDI_MARK_delete(long pointer);
	protected final static native int BASS_MIDI_MARK_get_track(long pointer);
	protected final static native void BASS_MIDI_MARK_set_track(long pointer, int track);
	protected final static native int BASS_MIDI_MARK_get_pos(long pointer);
	protected final static native void BASS_MIDI_MARK_set_pos(long pointer, int pos);
	protected final static native String BASS_MIDI_MARK_get_text(long pointer);
	protected final static native void BASS_MIDI_MARK_set_text(long pointer, byte[] text);

						/* BASS_MIXER_NODE */

	protected final static native long BASS_MIXER_NODE_new();
	protected final static native void BASS_MIXER_NODE_delete(long pointer);
	protected final static native long BASS_MIXER_NODE_get_pos(long pointer);
	protected final static native void BASS_MIXER_NODE_set_pos(long pointer, long pos);
	protected final static native float BASS_MIXER_NODE_get_value(long pointer);
	protected final static native void BASS_MIXER_NODE_set_value(long pointer, float value);

						/* BASS_PLUGINFORM */

	protected final static native int BASS_PLUGINFORM_SIZEOF();
	protected final static native long BASS_PLUGINFORM_newArray(int length);
	protected final static native long BASS_PLUGINFORM_new();
	protected final static native void BASS_PLUGINFORM_delete(long pointer);
	protected final static native int BASS_PLUGINFORM_get_ctype(long pointer);
	protected final static native void BASS_PLUGINFORM_set_ctype(long pointer, int ctype);
	protected final static native String BASS_PLUGINFORM_get_name(long pointer);
	protected final static native void BASS_PLUGINFORM_set_name(long pointer, byte[] name);
	protected final static native String BASS_PLUGINFORM_get_exts(long pointer);
	protected final static native void BASS_PLUGINFORM_set_exts(long pointer, byte[] exts);

						/* BASS_PLUGININFO */

	protected final static native long BASS_PLUGININFO_new();
	protected final static native void BASS_PLUGININFO_delete(long pointer);
	protected final static native int BASS_PLUGININFO_get_version(long pointer);
	protected final static native int BASS_PLUGININFO_get_formatc(long pointer);
	protected final static native long BASS_PLUGININFO_get_formats_element(long pointer, int elementIndex);
	protected final static native long BASS_PLUGININFO_get_formats(long pointer);

						/* BASS_RECORDINFO */

	protected final static native long BASS_RECORDINFO_new();
	protected final static native void BASS_RECORDINFO_delete(long pointer);
	protected final static native int BASS_RECORDINFO_get_flags(long pointer);
	protected final static native void BASS_RECORDINFO_set_flags(long pointer, int flags);
	protected final static native int BASS_RECORDINFO_get_formats(long pointer);
	protected final static native void BASS_RECORDINFO_set_formats(long pointer, int formats);
	protected final static native int BASS_RECORDINFO_get_inputs(long pointer);
	protected final static native void BASS_RECORDINFO_set_inputs(long pointer, int inputs);
	protected final static native boolean BASS_RECORDINFO_get_singlein(long pointer);
	protected final static native void BASS_RECORDINFO_set_singlein(long pointer, boolean singlein);
	protected final static native int BASS_RECORDINFO_get_freq(long pointer);
	protected final static native void BASS_RECORDINFO_set_freq(long pointer, int freq);

						/* BASS_SAMPLE */

	protected final static native long BASS_SAMPLE_new();
	protected final static native void BASS_SAMPLE_delete(long pointer);
	protected final static native int BASS_SAMPLE_get_freq(long pointer);
	protected final static native void BASS_SAMPLE_set_freq(long pointer, int freq);
	protected final static native float BASS_SAMPLE_get_volume(long pointer);
	protected final static native void BASS_SAMPLE_set_volume(long pointer, float volume);
	protected final static native float BASS_SAMPLE_get_pan(long pointer);
	protected final static native void BASS_SAMPLE_set_pan(long pointer, float pan);
	protected final static native int BASS_SAMPLE_get_flags(long pointer);
	protected final static native void BASS_SAMPLE_set_flags(long pointer, int flags);
	protected final static native int BASS_SAMPLE_get_length(long pointer);
	protected final static native void BASS_SAMPLE_set_length(long pointer, int length);
	protected final static native int BASS_SAMPLE_get_max(long pointer);
	protected final static native void BASS_SAMPLE_set_max(long pointer, int max);
	protected final static native int BASS_SAMPLE_get_origres(long pointer);
	protected final static native void BASS_SAMPLE_set_origres(long pointer, int origres);
	protected final static native int BASS_SAMPLE_get_chans(long pointer);
	protected final static native void BASS_SAMPLE_set_chans(long pointer, int chans);
	protected final static native int BASS_SAMPLE_get_mingap(long pointer);
	protected final static native void BASS_SAMPLE_set_mingap(long pointer, int mingap);
	protected final static native int BASS_SAMPLE_get_mode3d(long pointer);
	protected final static native void BASS_SAMPLE_set_mode3d(long pointer, int mode3d);
	protected final static native float BASS_SAMPLE_get_mindist(long pointer);
	protected final static native void BASS_SAMPLE_set_mindist(long pointer, float mindist);
	protected final static native float BASS_SAMPLE_get_maxdist(long pointer);
	protected final static native void BASS_SAMPLE_set_maxdist(long pointer, float maxdist);
	protected final static native int BASS_SAMPLE_get_iangle(long pointer);
	protected final static native void BASS_SAMPLE_set_iangle(long pointer, int iangle);
	protected final static native int BASS_SAMPLE_get_oangle(long pointer);
	protected final static native void BASS_SAMPLE_set_oangle(long pointer, int oangle);
	protected final static native float BASS_SAMPLE_get_outvol(long pointer);
	protected final static native void BASS_SAMPLE_set_outvol(long pointer, float outvol);
	protected final static native int BASS_SAMPLE_get_vam(long pointer);
	protected final static native void BASS_SAMPLE_set_vam(long pointer, int vam);
	protected final static native int BASS_SAMPLE_get_priority(long pointer);
	protected final static native void BASS_SAMPLE_set_priority(long pointer, int priority);

						/* HCHANNEL */

	protected final static native int HCHANNEL_SIZEOF();
	protected final static native long HCHANNEL_newArray(int length);

						/* HDSP */


						/* HENCODE */


						/* HFX */


						/* HMUSIC */


						/* HPLUGIN */


						/* HRECORD */


						/* HSAMPLE */


						/* HSOUNDFONT */


						/* HSTREAM */


						/* HSYNC */


						/* TAG_APE_BINARY */

	protected final static native long TAG_APE_BINARY_new();
	protected final static native void TAG_APE_BINARY_delete(long pointer);
	protected final static native String TAG_APE_BINARY_get_key(long pointer);
	protected final static native void TAG_APE_BINARY_set_key(long pointer, byte[] key);
	protected final static native long TAG_APE_BINARY_get_data(long pointer);
	protected final static native void TAG_APE_BINARY_set_data(long pointer, long data);
	protected final static native int TAG_APE_BINARY_get_length(long pointer);
	protected final static native void TAG_APE_BINARY_set_length(long pointer, int length);

						/* TAG_BEXT */

	protected final static native long TAG_BEXT_new();
	protected final static native void TAG_BEXT_delete(long pointer);
	protected final static native char TAG_BEXT_get_Description_element(long pointer, int elementIndex);
	protected final static native String TAG_BEXT_get_Description(long pointer);
	protected final static native void TAG_BEXT_set_Description(long pointer, int elementIndex, char Description);
	protected final static native char TAG_BEXT_get_Originator_element(long pointer, int elementIndex);
	protected final static native String TAG_BEXT_get_Originator(long pointer);
	protected final static native void TAG_BEXT_set_Originator(long pointer, int elementIndex, char Originator);
	protected final static native char TAG_BEXT_get_OriginatorReference_element(long pointer, int elementIndex);
	protected final static native String TAG_BEXT_get_OriginatorReference(long pointer);
	protected final static native void TAG_BEXT_set_OriginatorReference(long pointer, int elementIndex, char OriginatorReference);
	protected final static native char TAG_BEXT_get_OriginationDate_element(long pointer, int elementIndex);
	protected final static native String TAG_BEXT_get_OriginationDate(long pointer);
	protected final static native void TAG_BEXT_set_OriginationDate(long pointer, int elementIndex, char OriginationDate);
	protected final static native char TAG_BEXT_get_OriginationTime_element(long pointer, int elementIndex);
	protected final static native String TAG_BEXT_get_OriginationTime(long pointer);
	protected final static native void TAG_BEXT_set_OriginationTime(long pointer, int elementIndex, char OriginationTime);
	protected final static native long TAG_BEXT_get_TimeReference(long pointer);
	protected final static native void TAG_BEXT_set_TimeReference(long pointer, long TimeReference);
	protected final static native short TAG_BEXT_get_Version(long pointer);
	protected final static native void TAG_BEXT_set_Version(long pointer, short Version);
	protected final static native byte TAG_BEXT_get_UMID_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_BEXT_get_UMID(long pointer);
	protected final static native void TAG_BEXT_set_UMID(long pointer, int elementIndex, byte UMID);

						/* TAG_CART */

	protected final static native long TAG_CART_new();
	protected final static native void TAG_CART_delete(long pointer);
	protected final static native char TAG_CART_get_Version_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_Version(long pointer);
	protected final static native void TAG_CART_set_Version(long pointer, int elementIndex, char Version);
	protected final static native char TAG_CART_get_Title_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_Title(long pointer);
	protected final static native void TAG_CART_set_Title(long pointer, int elementIndex, char Title);
	protected final static native char TAG_CART_get_Artist_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_Artist(long pointer);
	protected final static native void TAG_CART_set_Artist(long pointer, int elementIndex, char Artist);
	protected final static native char TAG_CART_get_CutID_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_CutID(long pointer);
	protected final static native void TAG_CART_set_CutID(long pointer, int elementIndex, char CutID);
	protected final static native char TAG_CART_get_ClientID_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_ClientID(long pointer);
	protected final static native void TAG_CART_set_ClientID(long pointer, int elementIndex, char ClientID);
	protected final static native char TAG_CART_get_Category_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_Category(long pointer);
	protected final static native void TAG_CART_set_Category(long pointer, int elementIndex, char Category);
	protected final static native char TAG_CART_get_Classification_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_Classification(long pointer);
	protected final static native void TAG_CART_set_Classification(long pointer, int elementIndex, char Classification);
	protected final static native char TAG_CART_get_OutCue_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_OutCue(long pointer);
	protected final static native void TAG_CART_set_OutCue(long pointer, int elementIndex, char OutCue);
	protected final static native char TAG_CART_get_StartDate_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_StartDate(long pointer);
	protected final static native void TAG_CART_set_StartDate(long pointer, int elementIndex, char StartDate);
	protected final static native char TAG_CART_get_StartTime_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_StartTime(long pointer);
	protected final static native void TAG_CART_set_StartTime(long pointer, int elementIndex, char StartTime);
	protected final static native char TAG_CART_get_EndDate_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_EndDate(long pointer);
	protected final static native void TAG_CART_set_EndDate(long pointer, int elementIndex, char EndDate);
	protected final static native char TAG_CART_get_EndTime_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_EndTime(long pointer);
	protected final static native void TAG_CART_set_EndTime(long pointer, int elementIndex, char EndTime);
	protected final static native char TAG_CART_get_ProducerAppID_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_ProducerAppID(long pointer);
	protected final static native void TAG_CART_set_ProducerAppID(long pointer, int elementIndex, char ProducerAppID);
	protected final static native char TAG_CART_get_ProducerAppVersion_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_ProducerAppVersion(long pointer);
	protected final static native void TAG_CART_set_ProducerAppVersion(long pointer, int elementIndex, char ProducerAppVersion);
	protected final static native char TAG_CART_get_UserDef_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_UserDef(long pointer);
	protected final static native void TAG_CART_set_UserDef(long pointer, int elementIndex, char UserDef);
	protected final static native int TAG_CART_get_dwLevelReference(long pointer);
	protected final static native void TAG_CART_set_dwLevelReference(long pointer, int dwLevelReference);
	protected final static native long TAG_CART_get_PostTimer_element(long pointer, int elementIndex);
	protected final static native long TAG_CART_get_PostTimer(long pointer);
	protected final static native void TAG_CART_set_PostTimer(long pointer, int elementIndex, long PostTimer);
	protected final static native char TAG_CART_get_URL_element(long pointer, int elementIndex);
	protected final static native ByteBuffer TAG_CART_get_URL(long pointer);
	protected final static native void TAG_CART_set_URL(long pointer, int elementIndex, char URL);

						/* TAG_CART_TIMER */

	protected final static native int TAG_CART_TIMER_SIZEOF();
	protected final static native long TAG_CART_TIMER_newArray(int length);
	protected final static native long TAG_CART_TIMER_new();
	protected final static native void TAG_CART_TIMER_delete(long pointer);
	protected final static native int TAG_CART_TIMER_get_dwUsage(long pointer);
	protected final static native void TAG_CART_TIMER_set_dwUsage(long pointer, int dwUsage);
	protected final static native int TAG_CART_TIMER_get_dwValue(long pointer);
	protected final static native void TAG_CART_TIMER_set_dwValue(long pointer, int dwValue);

						/* TAG_CA_CODEC */

	protected final static native long TAG_CA_CODEC_new();
	protected final static native void TAG_CA_CODEC_delete(long pointer);
	protected final static native int TAG_CA_CODEC_get_ftype(long pointer);
	protected final static native void TAG_CA_CODEC_set_ftype(long pointer, int ftype);
	protected final static native int TAG_CA_CODEC_get_atype(long pointer);
	protected final static native void TAG_CA_CODEC_set_atype(long pointer, int atype);
	protected final static native String TAG_CA_CODEC_get_name(long pointer);
	protected final static native void TAG_CA_CODEC_set_name(long pointer, byte[] name);

						/* TAG_FLAC_CUE */

	protected final static native long TAG_FLAC_CUE_new();
	protected final static native void TAG_FLAC_CUE_delete(long pointer);
	protected final static native String TAG_FLAC_CUE_get_catalog(long pointer);
	protected final static native void TAG_FLAC_CUE_set_catalog(long pointer, byte[] catalog);
	protected final static native int TAG_FLAC_CUE_get_leadin(long pointer);
	protected final static native void TAG_FLAC_CUE_set_leadin(long pointer, int leadin);
	protected final static native boolean TAG_FLAC_CUE_get_iscd(long pointer);
	protected final static native void TAG_FLAC_CUE_set_iscd(long pointer, boolean iscd);
	protected final static native int TAG_FLAC_CUE_get_ntracks(long pointer);
	protected final static native void TAG_FLAC_CUE_set_ntracks(long pointer, int ntracks);
	protected final static native long TAG_FLAC_CUE_get_tracks(long pointer);
	protected final static native void TAG_FLAC_CUE_set_tracks(long pointer, long tracks);

						/* TAG_FLAC_CUE_TRACK */

	protected final static native long TAG_FLAC_CUE_TRACK_new();
	protected final static native void TAG_FLAC_CUE_TRACK_delete(long pointer);
	protected final static native long TAG_FLAC_CUE_TRACK_get_offset(long pointer);
	protected final static native void TAG_FLAC_CUE_TRACK_set_offset(long pointer, long offset);
	protected final static native int TAG_FLAC_CUE_TRACK_get_number(long pointer);
	protected final static native void TAG_FLAC_CUE_TRACK_set_number(long pointer, int number);
	protected final static native String TAG_FLAC_CUE_TRACK_get_isrc(long pointer);
	protected final static native void TAG_FLAC_CUE_TRACK_set_isrc(long pointer, byte[] isrc);
	protected final static native int TAG_FLAC_CUE_TRACK_get_flags(long pointer);
	protected final static native void TAG_FLAC_CUE_TRACK_set_flags(long pointer, int flags);
	protected final static native int TAG_FLAC_CUE_TRACK_get_nindexes(long pointer);
	protected final static native void TAG_FLAC_CUE_TRACK_set_nindexes(long pointer, int nindexes);
	protected final static native long TAG_FLAC_CUE_TRACK_get_indexes(long pointer);
	protected final static native void TAG_FLAC_CUE_TRACK_set_indexes(long pointer, long indexes);

						/* TAG_FLAC_CUE_TRACK_INDEX */

	protected final static native long TAG_FLAC_CUE_TRACK_INDEX_new();
	protected final static native void TAG_FLAC_CUE_TRACK_INDEX_delete(long pointer);
	protected final static native long TAG_FLAC_CUE_TRACK_INDEX_get_offset(long pointer);
	protected final static native void TAG_FLAC_CUE_TRACK_INDEX_set_offset(long pointer, long offset);
	protected final static native int TAG_FLAC_CUE_TRACK_INDEX_get_number(long pointer);
	protected final static native void TAG_FLAC_CUE_TRACK_INDEX_set_number(long pointer, int number);

						/* TAG_FLAC_PICTURE */

	protected final static native long TAG_FLAC_PICTURE_new();
	protected final static native void TAG_FLAC_PICTURE_delete(long pointer);
	protected final static native int TAG_FLAC_PICTURE_get_apic(long pointer);
	protected final static native void TAG_FLAC_PICTURE_set_apic(long pointer, int apic);
	protected final static native String TAG_FLAC_PICTURE_get_mime(long pointer);
	protected final static native void TAG_FLAC_PICTURE_set_mime(long pointer, byte[] mime);
	protected final static native String TAG_FLAC_PICTURE_get_desc(long pointer);
	protected final static native void TAG_FLAC_PICTURE_set_desc(long pointer, byte[] desc);
	protected final static native int TAG_FLAC_PICTURE_get_width(long pointer);
	protected final static native void TAG_FLAC_PICTURE_set_width(long pointer, int width);
	protected final static native int TAG_FLAC_PICTURE_get_height(long pointer);
	protected final static native void TAG_FLAC_PICTURE_set_height(long pointer, int height);
	protected final static native int TAG_FLAC_PICTURE_get_depth(long pointer);
	protected final static native void TAG_FLAC_PICTURE_set_depth(long pointer, int depth);
	protected final static native int TAG_FLAC_PICTURE_get_colors(long pointer);
	protected final static native void TAG_FLAC_PICTURE_set_colors(long pointer, int colors);
	protected final static native int TAG_FLAC_PICTURE_get_length(long pointer);
	protected final static native void TAG_FLAC_PICTURE_set_length(long pointer, int length);
	protected final static native long TAG_FLAC_PICTURE_get_data(long pointer);
	protected final static native void TAG_FLAC_PICTURE_set_data(long pointer, long data);

						/* TAG_ID3 */

	protected final static native long TAG_ID3_new();
	protected final static native void TAG_ID3_delete(long pointer);
	protected final static native char TAG_ID3_get_id_element(long pointer, int elementIndex);
	protected final static native String TAG_ID3_get_id(long pointer);
	protected final static native void TAG_ID3_set_id(long pointer, int elementIndex, char id);
	protected final static native char TAG_ID3_get_title_element(long pointer, int elementIndex);
	protected final static native String TAG_ID3_get_title(long pointer);
	protected final static native void TAG_ID3_set_title(long pointer, int elementIndex, char title);
	protected final static native char TAG_ID3_get_artist_element(long pointer, int elementIndex);
	protected final static native String TAG_ID3_get_artist(long pointer);
	protected final static native void TAG_ID3_set_artist(long pointer, int elementIndex, char artist);
	protected final static native char TAG_ID3_get_album_element(long pointer, int elementIndex);
	protected final static native String TAG_ID3_get_album(long pointer);
	protected final static native void TAG_ID3_set_album(long pointer, int elementIndex, char album);
	protected final static native char TAG_ID3_get_year_element(long pointer, int elementIndex);
	protected final static native String TAG_ID3_get_year(long pointer);
	protected final static native void TAG_ID3_set_year(long pointer, int elementIndex, char year);
	protected final static native char TAG_ID3_get_comment_element(long pointer, int elementIndex);
	protected final static native String TAG_ID3_get_comment(long pointer);
	protected final static native void TAG_ID3_set_comment(long pointer, int elementIndex, char comment);
	protected final static native byte TAG_ID3_get_genre(long pointer);
	protected final static native void TAG_ID3_set_genre(long pointer, byte genre);

}