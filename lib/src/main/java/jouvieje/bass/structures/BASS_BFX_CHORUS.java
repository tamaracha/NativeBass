/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright @ 2007-2011 Jérôme Jouvie
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme Jouvie (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

package jouvieje.bass.structures;

import jouvieje.bass.*;
import jouvieje.bass.exceptions.*;
import jouvieje.bass.callbacks.*;
import jouvieje.bass.*;
import jouvieje.bass.defines.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import java.nio.*;
import jouvieje.bass.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import jouvieje.bass.utils.*;

public class BASS_BFX_CHORUS extends Pointer {
	/**
	 * Create a view of the <code>Pointer</code> object as a <code>BASS_BFX_CHORUS</code> object.<br>
	 * This view is valid only if the memory holded by the <code>Pointer</code> holds a BASS_BFX_CHORUS object.
	 */
	public static BASS_BFX_CHORUS asBASS_BFX_CHORUS(Pointer pointer) {
		long address = Pointer.getPointer(pointer);
		if(address == 0) return null;
		return new BASS_BFX_CHORUS(address);
	}
	/**
	 * Allocate a new <code>BASS_BFX_CHORUS</code>.<br>
	 * The call <code>isNull()</code> on the object created will return false.<br>
	 * <pre><code>  BASS_BFX_CHORUS obj = BASS_BFX_CHORUS.allocate();
	 *  (obj == null) <=> obj.isNull() <=> false
	 * </code></pre>
	 */
	public static BASS_BFX_CHORUS allocate() {
		final long pointer = StructureJNI.BASS_BFX_CHORUS_new();
		if(pointer == 0) throw new OutOfMemoryError();
		return new BASS_BFX_CHORUS(pointer);
	}

	protected BASS_BFX_CHORUS(long pointer) {
		super(pointer);
	}

	/**
	 * Create an object that holds a null <code>BASS_BFX_CHORUS</code>.<br>
	 * The call <code>isNull()</code> on the object created will returns true.<br>
	 * <pre><code>  BASS_BFX_CHORUS obj = new BASS_BFX_CHORUS();
	 *  (obj == null) <=> false
	 *  obj.isNull() <=> true
	 * </code></pre>
	 * To creates a new <code>BASS_BFX_CHORUS</code>, use the static "constructor" :
	 * <pre><code>  BASS_BFX_CHORUS obj = BASS_BFX_CHORUS.allocate();</code></pre>
	 * @see BASS_BFX_CHORUS#allocate()
	 */
	public BASS_BFX_CHORUS() {
		super();
	}

	public void release() {
		if(pointer != 0) {
			StructureJNI.BASS_BFX_CHORUS_delete(pointer);
		}
		pointer = 0;
	}

	/**
	 * dry (unaffected) signal mix				[-2......2]
	 */
	public float getDryMix() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_BFX_CHORUS_get_fDryMix(pointer);
		return javaResult;
	}
	/**
	 * dry (unaffected) signal mix				[-2......2]
	 */
	public void setDryMix(float dryMix) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_BFX_CHORUS_set_fDryMix(pointer, dryMix);
	}

	/**
	 * wet (affected) signal mix				[-2......2]
	 */
	public float getWetMix() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_BFX_CHORUS_get_fWetMix(pointer);
		return javaResult;
	}
	/**
	 * wet (affected) signal mix				[-2......2]
	 */
	public void setWetMix(float wetMix) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_BFX_CHORUS_set_fWetMix(pointer, wetMix);
	}

	/**
	 * feedback									[-1......1]
	 */
	public float getFeedback() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_BFX_CHORUS_get_fFeedback(pointer);
		return javaResult;
	}
	/**
	 * feedback									[-1......1]
	 */
	public void setFeedback(float feedback) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_BFX_CHORUS_set_fFeedback(pointer, feedback);
	}

	/**
	 * minimal delay ms							[0<...6000]
	 */
	public float getMinSweep() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_BFX_CHORUS_get_fMinSweep(pointer);
		return javaResult;
	}
	/**
	 * minimal delay ms							[0<...6000]
	 */
	public void setMinSweep(float minSweep) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_BFX_CHORUS_set_fMinSweep(pointer, minSweep);
	}

	/**
	 * maximum delay ms							[0<...6000]
	 */
	public float getMaxSweep() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_BFX_CHORUS_get_fMaxSweep(pointer);
		return javaResult;
	}
	/**
	 * maximum delay ms							[0<...6000]
	 */
	public void setMaxSweep(float maxSweep) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_BFX_CHORUS_set_fMaxSweep(pointer, maxSweep);
	}

	/**
	 * rate ms/s								[0<...1000]
	 */
	public float getRate() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_BFX_CHORUS_get_fRate(pointer);
		return javaResult;
	}
	/**
	 * rate ms/s								[0<...1000]
	 */
	public void setRate(float rate) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_BFX_CHORUS_set_fRate(pointer, rate);
	}

	/**
	 * BASS_BFX_CHANxxx flag/s
	 */
	public int getChannel() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_BFX_CHORUS_get_lChannel(pointer);
		return javaResult;
	}
	/**
	 * BASS_BFX_CHANxxx flag/s
	 */
	public void setChannel(int channel) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_BFX_CHORUS_set_lChannel(pointer, channel);
	}

}