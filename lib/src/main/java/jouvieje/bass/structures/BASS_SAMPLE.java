/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright @ 2007-2011 Jérôme Jouvie
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme Jouvie (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

package jouvieje.bass.structures;

import jouvieje.bass.*;
import jouvieje.bass.exceptions.*;
import jouvieje.bass.callbacks.*;
import jouvieje.bass.*;
import jouvieje.bass.defines.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import java.nio.*;
import jouvieje.bass.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import jouvieje.bass.utils.*;

public class BASS_SAMPLE extends Pointer {
	/**
	 * Create a view of the <code>Pointer</code> object as a <code>BASS_SAMPLE</code> object.<br>
	 * This view is valid only if the memory holded by the <code>Pointer</code> holds a BASS_SAMPLE object.
	 */
	public static BASS_SAMPLE asBASS_SAMPLE(Pointer pointer) {
		long address = Pointer.getPointer(pointer);
		if(address == 0) return null;
		return new BASS_SAMPLE(address);
	}
	/**
	 * Allocate a new <code>BASS_SAMPLE</code>.<br>
	 * The call <code>isNull()</code> on the object created will return false.<br>
	 * <pre><code>  BASS_SAMPLE obj = BASS_SAMPLE.allocate();
	 *  (obj == null) <=> obj.isNull() <=> false
	 * </code></pre>
	 */
	public static BASS_SAMPLE allocate() {
		final long pointer = StructureJNI.BASS_SAMPLE_new();
		if(pointer == 0) throw new OutOfMemoryError();
		return new BASS_SAMPLE(pointer);
	}

	protected BASS_SAMPLE(long pointer) {
		super(pointer);
	}

	/**
	 * Create an object that holds a null <code>BASS_SAMPLE</code>.<br>
	 * The call <code>isNull()</code> on the object created will returns true.<br>
	 * <pre><code>  BASS_SAMPLE obj = new BASS_SAMPLE();
	 *  (obj == null) <=> false
	 *  obj.isNull() <=> true
	 * </code></pre>
	 * To creates a new <code>BASS_SAMPLE</code>, use the static "constructor" :
	 * <pre><code>  BASS_SAMPLE obj = BASS_SAMPLE.allocate();</code></pre>
	 * @see BASS_SAMPLE#allocate()
	 */
	public BASS_SAMPLE() {
		super();
	}

	public void release() {
		if(pointer != 0) {
			StructureJNI.BASS_SAMPLE_delete(pointer);
		}
		pointer = 0;
	}

	/**
	 * default playback rate
	 */
	public int getFreq() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_freq(pointer);
		return javaResult;
	}
	/**
	 * default playback rate
	 */
	public void setFreq(int freq) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_freq(pointer, freq);
	}

	/**
	 * default volume (0-1)
	 */
	public float getVolume() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_SAMPLE_get_volume(pointer);
		return javaResult;
	}
	/**
	 * default volume (0-1)
	 */
	public void setVolume(float volume) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_volume(pointer, volume);
	}

	/**
	 * default pan (-1=left, 0=middle, 1=right)
	 */
	public float getPan() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_SAMPLE_get_pan(pointer);
		return javaResult;
	}
	/**
	 * default pan (-1=left, 0=middle, 1=right)
	 */
	public void setPan(float pan) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_pan(pointer, pan);
	}

	/**
	 * BASS_SAMPLE_xxx flags
	 */
	public int getFlags() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_flags(pointer);
		return javaResult;
	}
	/**
	 * BASS_SAMPLE_xxx flags
	 */
	public void setFlags(int flags) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_flags(pointer, flags);
	}

	/**
	 * length (in bytes)
	 */
	public int getLength() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_length(pointer);
		return javaResult;
	}
	/**
	 * length (in bytes)
	 */
	public void setLength(int length) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_length(pointer, length);
	}

	/**
	 * maximum simultaneous playbacks
	 */
	public int getMax() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_max(pointer);
		return javaResult;
	}
	/**
	 * maximum simultaneous playbacks
	 */
	public void setMax(int max) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_max(pointer, max);
	}

	/**
	 * original resolution bits
	 */
	public int getOrigRes() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_origres(pointer);
		return javaResult;
	}
	/**
	 * original resolution bits
	 */
	public void setOrigRes(int origRes) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_origres(pointer, origRes);
	}

	/**
	 * number of channels
	 */
	public int getChannels() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_chans(pointer);
		return javaResult;
	}
	/**
	 * number of channels
	 */
	public void setChannels(int channels) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_chans(pointer, channels);
	}

	/**
	 * minimum gap (ms) between creating channels
	 */
	public int getMinGap() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_mingap(pointer);
		return javaResult;
	}
	/**
	 * minimum gap (ms) between creating channels
	 */
	public void setMinGap(int minGap) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_mingap(pointer, minGap);
	}

	/**
	 * BASS_3DMODE_xxx mode
	 */
	public int getMode3d() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_mode3d(pointer);
		return javaResult;
	}
	/**
	 * BASS_3DMODE_xxx mode
	 */
	public void setMode3d(int mode3d) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_mode3d(pointer, mode3d);
	}

	/**
	 * minimum distance
	 */
	public float getMinDist() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_SAMPLE_get_mindist(pointer);
		return javaResult;
	}
	/**
	 * minimum distance
	 */
	public void setMinDist(float minDist) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_mindist(pointer, minDist);
	}

	/**
	 * maximum distance
	 */
	public float getMaxDist() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_SAMPLE_get_maxdist(pointer);
		return javaResult;
	}
	/**
	 * maximum distance
	 */
	public void setMaxDist(float maxDist) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_maxdist(pointer, maxDist);
	}

	/**
	 * angle of inside projection cone
	 */
	public int getInAngle() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_iangle(pointer);
		return javaResult;
	}
	/**
	 * angle of inside projection cone
	 */
	public void setInAngle(int inAngle) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_iangle(pointer, inAngle);
	}

	/**
	 * angle of outside projection cone
	 */
	public int getOutAngle() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_oangle(pointer);
		return javaResult;
	}
	/**
	 * angle of outside projection cone
	 */
	public void setOutAngle(int outAngle) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_oangle(pointer, outAngle);
	}

	/**
	 * delta-volume outside the projection cone
	 */
	public float getOutVol() {
		if(pointer == 0) throw new NullPointerException();
		float javaResult = StructureJNI.BASS_SAMPLE_get_outvol(pointer);
		return javaResult;
	}
	/**
	 * delta-volume outside the projection cone
	 */
	public void setOutVol(float outVol) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_outvol(pointer, outVol);
	}

	/**
	 * voice allocation/management flags (BASS_VAM_xxx)
	 */
	public int getVAM() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_vam(pointer);
		return javaResult;
	}
	/**
	 * voice allocation/management flags (BASS_VAM_xxx)
	 */
	public void setVAM(int VAM) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_vam(pointer, VAM);
	}

	/**
	 * priority (0=lowest, 0xffffffff=highest)
	 */
	public int getPriority() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.BASS_SAMPLE_get_priority(pointer);
		return javaResult;
	}
	/**
	 * priority (0=lowest, 0xffffffff=highest)
	 */
	public void setPriority(int priority) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.BASS_SAMPLE_set_priority(pointer, priority);
	}

}