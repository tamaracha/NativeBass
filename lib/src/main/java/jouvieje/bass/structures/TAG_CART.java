/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright @ 2007-2011 Jérôme Jouvie
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme Jouvie (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

package jouvieje.bass.structures;

import jouvieje.bass.*;
import jouvieje.bass.exceptions.*;
import jouvieje.bass.callbacks.*;
import jouvieje.bass.*;
import jouvieje.bass.defines.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import java.nio.*;
import jouvieje.bass.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import jouvieje.bass.utils.*;

/**
 * char TagText[1];				// free form text for scripts or tags
 */
public class TAG_CART extends Pointer {
	/**
	 * Create a view of the <code>Pointer</code> object as a <code>TAG_CART</code> object.<br>
	 * This view is valid only if the memory holded by the <code>Pointer</code> holds a TAG_CART object.
	 */
	public static TAG_CART asTAG_CART(Pointer pointer) {
		long address = Pointer.getPointer(pointer);
		if(address == 0) return null;
		return new TAG_CART(address);
	}
	/**
	 * Allocate a new <code>TAG_CART</code>.<br>
	 * The call <code>isNull()</code> on the object created will return false.<br>
	 * <pre><code>  TAG_CART obj = TAG_CART.allocate();
	 *  (obj == null) <=> obj.isNull() <=> false
	 * </code></pre>
	 */
	public static TAG_CART allocate() {
		final long pointer = StructureJNI.TAG_CART_new();
		if(pointer == 0) throw new OutOfMemoryError();
		return new TAG_CART(pointer);
	}

	protected TAG_CART(long pointer) {
		super(pointer);
	}

	/**
	 * Create an object that holds a null <code>TAG_CART</code>.<br>
	 * The call <code>isNull()</code> on the object created will returns true.<br>
	 * <pre><code>  TAG_CART obj = new TAG_CART();
	 *  (obj == null) <=> false
	 *  obj.isNull() <=> true
	 * </code></pre>
	 * To creates a new <code>TAG_CART</code>, use the static "constructor" :
	 * <pre><code>  TAG_CART obj = TAG_CART.allocate();</code></pre>
	 * @see TAG_CART#allocate()
	 */
	public TAG_CART() {
		super();
	}

	public void release() {
		if(pointer != 0) {
			StructureJNI.TAG_CART_delete(pointer);
		}
		pointer = 0;
	}

	/**
	 * version of the data structure
	 */
	public char getVersion(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 4) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+4+"[");
		char javaResult = StructureJNI.TAG_CART_get_Version_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * version of the data structure
	 */
	public CharBuffer getVersion() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_Version(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * version of the data structure
	 */
	public void setVersion(int elementIndex, char version) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 4) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+4+"[");
		StructureJNI.TAG_CART_set_Version(pointer, elementIndex, version);
	}

	/**
	 * title of cart audio sequence
	 */
	public char getTitle(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		char javaResult = StructureJNI.TAG_CART_get_Title_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * title of cart audio sequence
	 */
	public CharBuffer getTitle() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_Title(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * title of cart audio sequence
	 */
	public void setTitle(int elementIndex, char title) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_CART_set_Title(pointer, elementIndex, title);
	}

	/**
	 * artist or creator name
	 */
	public char getArtist(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		char javaResult = StructureJNI.TAG_CART_get_Artist_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * artist or creator name
	 */
	public CharBuffer getArtist() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_Artist(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * artist or creator name
	 */
	public void setArtist(int elementIndex, char artist) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_CART_set_Artist(pointer, elementIndex, artist);
	}

	/**
	 * cut number identification
	 */
	public char getCutID(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		char javaResult = StructureJNI.TAG_CART_get_CutID_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * cut number identification
	 */
	public CharBuffer getCutID() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_CutID(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * cut number identification
	 */
	public void setCutID(int elementIndex, char cutID) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_CART_set_CutID(pointer, elementIndex, cutID);
	}

	/**
	 * client identification
	 */
	public char getClientID(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		char javaResult = StructureJNI.TAG_CART_get_ClientID_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * client identification
	 */
	public CharBuffer getClientID() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_ClientID(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * client identification
	 */
	public void setClientID(int elementIndex, char clientID) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_CART_set_ClientID(pointer, elementIndex, clientID);
	}

	/**
	 * category ID, PSA, NEWS, etc
	 */
	public char getCategory(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		char javaResult = StructureJNI.TAG_CART_get_Category_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * category ID, PSA, NEWS, etc
	 */
	public CharBuffer getCategory() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_Category(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * category ID, PSA, NEWS, etc
	 */
	public void setCategory(int elementIndex, char category) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_CART_set_Category(pointer, elementIndex, category);
	}

	/**
	 * classification or auxiliary key
	 */
	public char getClassification(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		char javaResult = StructureJNI.TAG_CART_get_Classification_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * classification or auxiliary key
	 */
	public CharBuffer getClassification() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_Classification(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * classification or auxiliary key
	 */
	public void setClassification(int elementIndex, char classification) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_CART_set_Classification(pointer, elementIndex, classification);
	}

	/**
	 * out cue text
	 */
	public char getOutCue(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		char javaResult = StructureJNI.TAG_CART_get_OutCue_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * out cue text
	 */
	public CharBuffer getOutCue() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_OutCue(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * out cue text
	 */
	public void setOutCue(int elementIndex, char outCue) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_CART_set_OutCue(pointer, elementIndex, outCue);
	}

	/**
	 * yyyy-mm-dd
	 */
	public char getStartDate(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 10) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+10+"[");
		char javaResult = StructureJNI.TAG_CART_get_StartDate_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * yyyy-mm-dd
	 */
	public CharBuffer getStartDate() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_StartDate(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * yyyy-mm-dd
	 */
	public void setStartDate(int elementIndex, char startDate) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 10) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+10+"[");
		StructureJNI.TAG_CART_set_StartDate(pointer, elementIndex, startDate);
	}

	/**
	 * hh:mm:ss
	 */
	public char getStartTime(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 8) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+8+"[");
		char javaResult = StructureJNI.TAG_CART_get_StartTime_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * hh:mm:ss
	 */
	public CharBuffer getStartTime() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_StartTime(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * hh:mm:ss
	 */
	public void setStartTime(int elementIndex, char startTime) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 8) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+8+"[");
		StructureJNI.TAG_CART_set_StartTime(pointer, elementIndex, startTime);
	}

	/**
	 * yyyy-mm-dd
	 */
	public char getEndDate(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 10) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+10+"[");
		char javaResult = StructureJNI.TAG_CART_get_EndDate_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * yyyy-mm-dd
	 */
	public CharBuffer getEndDate() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_EndDate(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * yyyy-mm-dd
	 */
	public void setEndDate(int elementIndex, char endDate) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 10) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+10+"[");
		StructureJNI.TAG_CART_set_EndDate(pointer, elementIndex, endDate);
	}

	/**
	 * hh:mm:ss
	 */
	public char getEndTime(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 8) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+8+"[");
		char javaResult = StructureJNI.TAG_CART_get_EndTime_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * hh:mm:ss
	 */
	public CharBuffer getEndTime() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_EndTime(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * hh:mm:ss
	 */
	public void setEndTime(int elementIndex, char endTime) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 8) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+8+"[");
		StructureJNI.TAG_CART_set_EndTime(pointer, elementIndex, endTime);
	}

	/**
	 * name of vendor or application
	 */
	public char getProducerAppID(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		char javaResult = StructureJNI.TAG_CART_get_ProducerAppID_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * name of vendor or application
	 */
	public CharBuffer getProducerAppID() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_ProducerAppID(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * name of vendor or application
	 */
	public void setProducerAppID(int elementIndex, char producerAppID) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_CART_set_ProducerAppID(pointer, elementIndex, producerAppID);
	}

	/**
	 * version of producer application
	 */
	public char getProducerAppVersion(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		char javaResult = StructureJNI.TAG_CART_get_ProducerAppVersion_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * version of producer application
	 */
	public CharBuffer getProducerAppVersion() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_ProducerAppVersion(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * version of producer application
	 */
	public void setProducerAppVersion(int elementIndex, char producerAppVersion) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_CART_set_ProducerAppVersion(pointer, elementIndex, producerAppVersion);
	}

	/**
	 * user defined text
	 */
	public char getUserDef(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		char javaResult = StructureJNI.TAG_CART_get_UserDef_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * user defined text
	 */
	public CharBuffer getUserDef() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_UserDef(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * user defined text
	 */
	public void setUserDef(int elementIndex, char userDef) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_CART_set_UserDef(pointer, elementIndex, userDef);
	}

	/**
	 * sample value for 0 dB reference
	 */
	public int getDwLevelReference() {
		if(pointer == 0) throw new NullPointerException();
		int javaResult = StructureJNI.TAG_CART_get_dwLevelReference(pointer);
		return javaResult;
	}
	/**
	 * sample value for 0 dB reference
	 */
	public void setDwLevelReference(int dwLevelReference) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.TAG_CART_set_dwLevelReference(pointer, dwLevelReference);
	}

	/**
	 * 8 time markers after head
	 */
	public TAG_CART_TIMER getPostTimer(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 8) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+8+"[");
		long javaResult = StructureJNI.TAG_CART_get_PostTimer_element(pointer, elementIndex);
		return javaResult == 0 ? null : TAG_CART_TIMER.asTAG_CART_TIMER(Pointer.newPointer(javaResult));
	}
	/**
	 * 8 time markers after head
	 */
	public TAG_CART_TIMER[] getPostTimer() {
		if(pointer == 0) throw new NullPointerException();
		long javaResult = StructureJNI.TAG_CART_get_PostTimer(pointer);
		int PostTimerLength = 8;
		if(PostTimerLength <= 0 || javaResult == 0) return null;
		TAG_CART_TIMER[] PostTimerArray = new TAG_CART_TIMER[PostTimerLength];
		int SIZEOF_TAG_CART_TIMER = StructureJNI.TAG_CART_TIMER_SIZEOF();
		for(int i = 0; i < PostTimerArray.length; i++) {
			PostTimerArray[i] = new TAG_CART_TIMER(javaResult + i * SIZEOF_TAG_CART_TIMER);
		}
		return PostTimerArray;
	}
	/**
	 * 8 time markers after head
	 */
	public void setPostTimer(int elementIndex, TAG_CART_TIMER postTimer) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 8) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+8+"[");
		StructureJNI.TAG_CART_set_PostTimer(pointer, elementIndex, Pointer.getPointer(postTimer));
	}

	/**
	 * uniform resource locator
	 */
	public char getUrl(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 1024) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+1024+"[");
		char javaResult = StructureJNI.TAG_CART_get_URL_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * uniform resource locator
	 */
	public CharBuffer getUrl() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_CART_get_URL(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult.asCharBuffer();
	}
	/**
	 * uniform resource locator
	 */
	public void setUrl(int elementIndex, char url) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 1024) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+1024+"[");
		StructureJNI.TAG_CART_set_URL(pointer, elementIndex, url);
	}

}