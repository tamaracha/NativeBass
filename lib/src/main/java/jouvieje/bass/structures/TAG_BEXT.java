/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright @ 2007-2011 Jérôme Jouvie
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme Jouvie (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

package jouvieje.bass.structures;

import jouvieje.bass.*;
import jouvieje.bass.exceptions.*;
import jouvieje.bass.callbacks.*;
import jouvieje.bass.*;
import jouvieje.bass.defines.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import java.nio.*;
import jouvieje.bass.*;
import jouvieje.bass.enumerations.*;
import jouvieje.bass.structures.*;
import jouvieje.bass.utils.*;

/**
 * char CodingHistory[1];			// history
 */
public class TAG_BEXT extends Pointer {
	/**
	 * Create a view of the <code>Pointer</code> object as a <code>TAG_BEXT</code> object.<br>
	 * This view is valid only if the memory holded by the <code>Pointer</code> holds a TAG_BEXT object.
	 */
	public static TAG_BEXT asTAG_BEXT(Pointer pointer) {
		long address = Pointer.getPointer(pointer);
		if(address == 0) return null;
		return new TAG_BEXT(address);
	}
	/**
	 * Allocate a new <code>TAG_BEXT</code>.<br>
	 * The call <code>isNull()</code> on the object created will return false.<br>
	 * <pre><code>  TAG_BEXT obj = TAG_BEXT.allocate();
	 *  (obj == null) <=> obj.isNull() <=> false
	 * </code></pre>
	 */
	public static TAG_BEXT allocate() {
		final long pointer = StructureJNI.TAG_BEXT_new();
		if(pointer == 0) throw new OutOfMemoryError();
		return new TAG_BEXT(pointer);
	}

	protected TAG_BEXT(long pointer) {
		super(pointer);
	}

	/**
	 * Create an object that holds a null <code>TAG_BEXT</code>.<br>
	 * The call <code>isNull()</code> on the object created will returns true.<br>
	 * <pre><code>  TAG_BEXT obj = new TAG_BEXT();
	 *  (obj == null) <=> false
	 *  obj.isNull() <=> true
	 * </code></pre>
	 * To creates a new <code>TAG_BEXT</code>, use the static "constructor" :
	 * <pre><code>  TAG_BEXT obj = TAG_BEXT.allocate();</code></pre>
	 * @see TAG_BEXT#allocate()
	 */
	public TAG_BEXT() {
		super();
	}

	public void release() {
		if(pointer != 0) {
			StructureJNI.TAG_BEXT_delete(pointer);
		}
		pointer = 0;
	}

	/**
	 * description
	 */
	public char getDescription(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 256) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+256+"[");
		char javaResult = StructureJNI.TAG_BEXT_get_Description_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * description
	 */
	public String getDescription() {
		if(pointer == 0) throw new NullPointerException();
		String javaResult = StructureJNI.TAG_BEXT_get_Description(pointer);
		return javaResult;
	}
	/**
	 * description
	 */
	public void setDescription(int elementIndex, char description) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 256) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+256+"[");
		StructureJNI.TAG_BEXT_set_Description(pointer, elementIndex, description);
	}

	/**
	 * name of the originator
	 */
	public char getOriginator(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 32) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+32+"[");
		char javaResult = StructureJNI.TAG_BEXT_get_Originator_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * name of the originator
	 */
	public String getOriginator() {
		if(pointer == 0) throw new NullPointerException();
		String javaResult = StructureJNI.TAG_BEXT_get_Originator(pointer);
		return javaResult;
	}
	/**
	 * name of the originator
	 */
	public void setOriginator(int elementIndex, char originator) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 32) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+32+"[");
		StructureJNI.TAG_BEXT_set_Originator(pointer, elementIndex, originator);
	}

	/**
	 * reference of the originator
	 */
	public char getOriginatorReference(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 32) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+32+"[");
		char javaResult = StructureJNI.TAG_BEXT_get_OriginatorReference_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * reference of the originator
	 */
	public String getOriginatorReference() {
		if(pointer == 0) throw new NullPointerException();
		String javaResult = StructureJNI.TAG_BEXT_get_OriginatorReference(pointer);
		return javaResult;
	}
	/**
	 * reference of the originator
	 */
	public void setOriginatorReference(int elementIndex, char originatorReference) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 32) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+32+"[");
		StructureJNI.TAG_BEXT_set_OriginatorReference(pointer, elementIndex, originatorReference);
	}

	/**
	 * date of creation (yyyy-mm-dd)
	 */
	public char getOriginationDate(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 10) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+10+"[");
		char javaResult = StructureJNI.TAG_BEXT_get_OriginationDate_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * date of creation (yyyy-mm-dd)
	 */
	public String getOriginationDate() {
		if(pointer == 0) throw new NullPointerException();
		String javaResult = StructureJNI.TAG_BEXT_get_OriginationDate(pointer);
		return javaResult;
	}
	/**
	 * date of creation (yyyy-mm-dd)
	 */
	public void setOriginationDate(int elementIndex, char originationDate) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 10) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+10+"[");
		StructureJNI.TAG_BEXT_set_OriginationDate(pointer, elementIndex, originationDate);
	}

	/**
	 * time of creation (hh-mm-ss)
	 */
	public char getOriginationTime(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 8) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+8+"[");
		char javaResult = StructureJNI.TAG_BEXT_get_OriginationTime_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * time of creation (hh-mm-ss)
	 */
	public String getOriginationTime() {
		if(pointer == 0) throw new NullPointerException();
		String javaResult = StructureJNI.TAG_BEXT_get_OriginationTime(pointer);
		return javaResult;
	}
	/**
	 * time of creation (hh-mm-ss)
	 */
	public void setOriginationTime(int elementIndex, char originationTime) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 8) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+8+"[");
		StructureJNI.TAG_BEXT_set_OriginationTime(pointer, elementIndex, originationTime);
	}

	/**
	 * first sample count since midnight (little-endian)
	 */
	public long getTimeReference() {
		if(pointer == 0) throw new NullPointerException();
		long javaResult = StructureJNI.TAG_BEXT_get_TimeReference(pointer);
		return javaResult;
	}
	/**
	 * first sample count since midnight (little-endian)
	 */
	public void setTimeReference(long timeReference) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.TAG_BEXT_set_TimeReference(pointer, timeReference);
	}

	/**
	 * BWF version (little-endian)
	 */
	public short getVersion() {
		if(pointer == 0) throw new NullPointerException();
		short javaResult = StructureJNI.TAG_BEXT_get_Version(pointer);
		return javaResult;
	}
	/**
	 * BWF version (little-endian)
	 */
	public void setVersion(short version) {
		if(pointer == 0) throw new NullPointerException();
		StructureJNI.TAG_BEXT_set_Version(pointer, version);
	}

	/**
	 * SMPTE UMID
	 */
	public byte getUmid(int elementIndex) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		byte javaResult = StructureJNI.TAG_BEXT_get_UMID_element(pointer, elementIndex);
		return javaResult;
	}
	/**
	 * SMPTE UMID
	 */
	public ByteBuffer getUmid() {
		if(pointer == 0) throw new NullPointerException();
		ByteBuffer javaResult = StructureJNI.TAG_BEXT_get_UMID(pointer);
		if(javaResult == null) { return null; }
		javaResult.order(ByteOrder.nativeOrder());
		return javaResult;
	}
	/**
	 * SMPTE UMID
	 */
	public void setUmid(int elementIndex, byte umid) {
		if(pointer == 0) throw new NullPointerException();
		if(elementIndex < 0 || elementIndex > 64) throw new IndexOutOfBoundsException(elementIndex+" out of bounds [0; "+64+"[");
		StructureJNI.TAG_BEXT_set_UMID(pointer, elementIndex, umid);
	}

}